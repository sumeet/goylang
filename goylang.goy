import "os"
import "fmt"
import "strconv"

enum TokenType {
	FuncDecl,
	LParen,
	RParen,
	LCurly,
	RCurly,
	LBracket,
	RBracket,
	Ident,
	IntLiteral,
	BinaryOp,
	Newline,
	Comma,
	StringLiteral,
	EnumDecl,
	Match,
	Dot,
	Colon,
	Equals,
	Import,
	Struct,
	While,
	If,
	Return,
	Else,
	Break,
	Continue,
}

struct Token {
	Type TokenType,
	Value string,
	Loc int,
}

func newToken(tt TokenType, value string, loc int) Token {
    return Token{tt, value, loc}
}

func eqany(xs []byte, x byte) bool {
    i := 0
    while {
        if (i == len(xs)) {
            return false
        }
        b := xs[i]
        if (x == b) {
            return true
        }
        i = i + 1
    }
}

func isAlphanumeric(b byte) bool {
  return isDigit(b) || isAlpha(b)
}

func peekBinaryOp(dat []byte, start int) string {
  binaryOps := []string{"+", "-", "*", "/", "%", "==", "!=", "<=", ">=", "&&", "||", "<", ">"}
  i := 0
  while {
    if (i >= len(binaryOps)) {
        return ""
    } else if (nc(dat, start, binaryOps[i])) {
        return binaryOps[i]
    }
    i = i + 1
  }
}

func lex(dat []byte) []Token {
	tokens := []Token{}
	i := 0
	while {
		if (i >= len(dat)) {
			break
		} else if (nc(dat, i, " ") || nc(dat, i, "\t")) {
			i = i + 1
			continue
		} else if (nc(dat, i, "//")) {
			while {
				if (nc(dat, i, "\n")) {
					tokens = append(tokens, newToken(TokenType.Newline{}, "\n", i))
					break
				} else {
					i = i + 1
				}
			}
		} else if (isAlpha(dat[i])) {
			ident := []byte{}
			while {
				if (isAlphanumeric(dat[i])) {
					ident = append(ident, dat[i])
					i = i + 1
				} else {
					if (string(ident) == "enum") {
						tokens = append(tokens, newToken(TokenType.EnumDecl{}, string(ident), i))
					} else if (string(ident) == "import") {
						tokens = append(tokens, newToken(TokenType.Import{}, string(ident), i))
					} else if (string(ident) == "struct") {
						tokens = append(tokens, newToken(TokenType.Struct{}, string(ident), i))
					} else if (string(ident) == "func") {
						tokens = append(tokens, newToken(TokenType.FuncDecl{}, string(ident), i))
					} else if (string(ident) == "while") {
						tokens = append(tokens, newToken(TokenType.While{}, string(ident), i))
					} else if (string(ident) == "if") {
						tokens = append(tokens, newToken(TokenType.If{}, string(ident), i))
					} else if (string(ident) == "return") {
						tokens = append(tokens, newToken(TokenType.Return{}, string(ident), i))
					} else if (string(ident) == "else") {
						tokens = append(tokens, newToken(TokenType.Else{}, string(ident), i))
					} else if (string(ident) == "break") {
						tokens = append(tokens, newToken(TokenType.Break{}, string(ident), i))
					} else if (string(ident) == "continue") {
						tokens = append(tokens, newToken(TokenType.Continue{}, string(ident), i))
					} else if (string(ident) == "match") {
						tokens = append(tokens, newToken(TokenType.Match{}, string(ident), i))
					} else {
						tokens = append(tokens, newToken(TokenType.Ident{}, string(ident), i))
					}
					break
				}
			}
			continue
		} else if (isDigit(dat[i])) {
		  n := []byte{}
		  while {
			  if (isDigit(dat[i])) {
			  	n = append(n, dat[i])
			  	i = i + 1
			  } else {
			    tokens = append(tokens, newToken(TokenType.IntLiteral{}, string(n), i))
			    break
			  }
		  }
		} else if (nc(dat, i, "{")) {
			tokens = append(tokens, newToken(TokenType.LCurly{}, "{", i))
			i = i + 1
		} else if (nc(dat, i, "}")) {
			tokens = append(tokens, newToken(TokenType.RCurly{}, "}", i))
			i = i + 1
		} else if (nc(dat, i, "[")) {
			tokens = append(tokens, newToken(TokenType.LBracket{}, "[", i))
			i = i + 1
		} else if (nc(dat, i, "]")) {
			tokens = append(tokens, newToken(TokenType.RBracket{}, "]", i))
			i = i + 1
		} else if (nc(dat, i, "(")) {
			tokens = append(tokens, newToken(TokenType.LParen{}, "(", i))
			i = i + 1
		} else if (nc(dat, i, ")")) {
			tokens = append(tokens, newToken(TokenType.RParen{}, ")", i))
			i = i + 1
		} else if (nc(dat, i, "\n")) {
			tokens = append(tokens, newToken(TokenType.Newline{}, "\n", i))
			i = i + 1
		} else if (nc(dat, i, "\r\n")) {
			tokens = append(tokens, newToken(TokenType.Newline{}, "\r\n", i))
			i = i + 2
		} else if (nc(dat, i, ",")) {
			tokens = append(tokens, newToken(TokenType.Comma{}, ",", i))
			i = i + 1
		} else if (nc(dat, i, ":")) {
			tokens = append(tokens, newToken(TokenType.Colon{}, ":", i))
			i = i + 1
		} else if (nc(dat, i, ".")) {
			tokens = append(tokens, newToken(TokenType.Dot{}, ".", i))
			i = i + 1
        // double quoted string literals
		} else if (nc(dat, i, "\"")) {
		    iStart := i
			str := bs("\"")
			i = i + 1
			while {
				if (nc(dat, i, "\"")) {
					str = append(str, dat[i])
					i = i + 1
					break
				} else if (nc(dat, i, "\\\"")) {
					str = append(str, dat[i], dat[i + 1])
					i = i + 2
				} else {
					str = append(str, dat[i])
					i = i + 1
				}
			}
			tokens = append(tokens, newToken(TokenType.StringLiteral{}, string(str), iStart))
        // backtick quoted string literals
		} else if (nc(dat, i, "`")) {
		    iStart := i
			str := bs("`")
			i = i + 1
			while {
				if (nc(dat, i, "`")) {
					str = append(str, dat[i])
					i = i + 1
					break
				} else if (nc(dat, i, "\\\"")) {
					str = append(str, dat[i], dat[i + 1])
					i = i + 2
				} else {
					str = append(str, dat[i])
					i = i + 1
				}
			}
			tokens = append(tokens, newToken(TokenType.StringLiteral{}, string(str), iStart))
		} else {
            str := peekBinaryOp(dat, i)
            if (len(str) > 0) {
              tokens = append(tokens, newToken(TokenType.BinaryOp{}, str, i))
              i = i + len(str)
		    } else if (nc(dat, i, "=")) {
			  tokens = append(tokens, newToken(TokenType.Equals{}, "=", i))
			  i = i + 1
            } else {
              panic(sprintf("unexpected token: |%c|\n\ntokens so far: %#v", dat[i], tokens))
            }
		}
	}
	return tokens
}

enum Declaration {
	Enum(Enum),
	Import(Import),
	Struct(Struct),
	Function(Function),
}

struct FunctionParam {
    Name string,
    Type string, // TODO: this should be a Type probably?
}

struct Function {
    Name string,
    Params []FunctionParam,
    ReturnTypes []string,
    Body Block,
}

enum LValue {
  Variable(string),
  Dot(DotLValue),
}

struct DotLValue {
    LHS LValue,
    RHS LValue,
}

struct FuncCall {
  LHS Expr,
  Params []Expr,
}

enum Expr {
  VarRef(string),
  FuncCall(FuncCall),
  // would be cool to get a warning if this was never constructed
  // rust does that and it's very useful
  IntLiteral(int),
  BinOp(BinOp),
  Block(Block),
  ArrayAccess(ArrayAccess),
  Initializer(Initializer),
  StringLiteral(string),
  DotAccess(DotAccess),
}

struct DotAccess {
    LHS Expr,
    Field string,
}

struct Initializer {
  Type string,
  Params []Expr,
}

struct ArrayAccess {
  LHS Expr,
  Index Expr,
}

struct BinOp {
    LHS Expr,
    RHS Expr,
    Op string,
}

struct Assignment {
  LValues []LValue,
  RValue Expr,
  IsReassignment bool,
}

struct If {
    Cond Expr,
    IfBody Expr,
    ElseBody Statement, // this can be empty
}

func parseReturn(tokens []Token) (Return, []Token) {
  t := Token{}
  t, tokens = consumeToken(tokens, TokenType.Return{})
  r := Return {}

  if (peekToken(tokens, TokenType.Newline{})) {
    return r, tokens
  }

  e := sentinelExprJank()
  e, tokens = parseExpr(tokens)
  r.Exprs = append(r.Exprs, e)
  while {
      if (not(peekToken(tokens, TokenType.Comma{}))) {
        break
      }
      t, tokens = consumeToken(tokens, TokenType.Comma{})
      e, tokens = parseExpr(tokens)
      r.Exprs = append(r.Exprs, e)
  }
  return r, tokens
}

func parseStatement(tokens []Token) (Statement, []Token) {
  if (peekToken(tokens, TokenType.Continue{})) {
    t, tokens := consumeToken(tokens, TokenType.Continue{})
    return Statement.Continue{}, tokens
  } else if (peekToken(tokens, TokenType.Break{})) {
    t, tokens := consumeToken(tokens, TokenType.Break{})
    return Statement.Break{}, tokens
  } else if (peekToken(tokens, TokenType.While{})) {
    w, tokens := parseWhile(tokens)
    return Statement.While { w }, tokens
  } else if (peekToken(tokens, TokenType.If{})) {
    i, tokens := parseIf(tokens)
    return Statement.If { i }, tokens
  } else if (peekToken(tokens, TokenType.Return{})) {
    r, tokens := parseReturn(tokens)
    return Statement.Return { r }, tokens
  } else if (peekToken(tokens, TokenType.Match{})) {
    m, tokens := parseMatch(tokens)
    return Statement.Match { m }, tokens
  }

  isAssignment := false
  ass := Assignment {}
  isAssignment, ass, tokens = tryParseAssignment(tokens)
  if (isAssignment) {
    return Statement.Assignment { ass }, tokens
  }

  //fmt.Printf("trying to parse expr, these are the next tokens: %#v\n", tokens)
  expr, tokens := parseExpr(tokens)
  //fmt.Printf("done parsing expr\n")
  return Statement.Expr { expr }, tokens
}

// TODO lol
func sentinelLValueJank() LValue {
    return LValue.Variable { "" }
}

func identsToLValue(idents []string) LValue {
    if (len(idents) == 0) {
        panic("requesting idents to lvalue for no idents")
    } else if (len(idents) == 1) {
        return LValue.Variable { idents[0] }
    }
    l := LValue.Variable { idents[0] }
    r := LValue.Variable { idents[1] }
    acc := sentinelLValueJank()
    acc = LValue.Dot { DotLValue { l, r } }
    idents = slice(idents, 2)
    while {
        if (len(idents) == 0) {
            return acc
        } else if (len(idents) == 1) {
            dlv := DotLValue { acc, LValue.Variable { idents[0] } }
            return LValue.Dot { dlv }
        } else {
            l := LValue.Variable { idents[0] }
            r := LValue.Variable { idents[1] }
            dlv := DotLValue { l, r }
            acc = LValue.Dot { DotLValue { acc, LValue.Dot { dlv } } }
            idents = slice(idents, 2)
        }
    }
}

func tryParseAssignment(tokens []Token) (bool, Assignment, []Token) {
    origTokens := tokens
    t := Token{}
    ass := Assignment {}
    ass.IsReassignment = false
    collectedIdents := []string{}
    while {
      if (peekTokens(tokens, []TokenType{TokenType.Ident{}, TokenType.Equals{}})) {
         ass.IsReassignment = true
         t, tokens = consumeToken(tokens, TokenType.Ident{})
         collectedIdents = append(collectedIdents, t.Value)
         ass.LValues = append(ass.LValues, identsToLValue(collectedIdents))
         collectedIdents = []string{}
         t, tokens = consumeToken(tokens, TokenType.Equals{})
         break
      } else if (peekTokens(tokens, []TokenType{TokenType.Ident{}, TokenType.Colon{}, TokenType.Equals{}})) {
        ass.IsReassignment = false
        t, tokens = consumeToken(tokens, TokenType.Ident{})
        collectedIdents = append(collectedIdents, t.Value)
        ass.LValues = append(ass.LValues, identsToLValue(collectedIdents))
        collectedIdents = []string{}
        t, tokens = consumeToken(tokens, TokenType.Colon{})
        t, tokens = consumeToken(tokens, TokenType.Equals{})
        break
      } else if (peekTokens(tokens, []TokenType{TokenType.Ident{}, TokenType.Comma{}})) {
        t, tokens = consumeToken(tokens, TokenType.Ident{})
        collectedIdents = append(collectedIdents, t.Value)
        ass.LValues = append(ass.LValues, identsToLValue(collectedIdents))
        collectedIdents = []string{}
        t, tokens = consumeToken(tokens, TokenType.Comma{})
      } else if (peekTokens(tokens, []TokenType{TokenType.Ident{}, TokenType.Dot{}})) {
        t, tokens = consumeToken(tokens, TokenType.Ident{})
        collectedIdents = append(collectedIdents, t.Value)
        t, tokens = consumeToken(tokens, TokenType.Dot{})
        continue
      } else {
        return false, Assignment{}, origTokens
      }
    }

    ass.RValue, tokens = parseExpr(tokens)
    return true, ass, tokens
}

// because there's no way to declare enums
func sentinelExprJank() Expr {
    return Expr.VarRef { "" }
}

func parseInitializer(tokens []Token, typ string) (Initializer, []Token) {
    t := Token{}
    i := Initializer{}
    i.Type = typ
    t, tokens = consumeToken(tokens, TokenType.LCurly{})
    while {
        if (peekToken(tokens, TokenType.RCurly{})) {
          break
        }
        arg, tokens2 := parseExpr(tokens)
        tokens = tokens2
        i.Params = append(i.Params, arg)
        if (peekToken(tokens, TokenType.Comma{})) {
            t, tokens = consumeToken(tokens, TokenType.Comma{})
        } else {
            break
        }
    }
    t, tokens = consumeToken(tokens, TokenType.RCurly{})
    return i, tokens
}

func parseExpr(tokens []Token) (Expr, []Token) {
    t := Token{}
    expr := sentinelExprJank()

    // this might be kind of cheating, for the array initializer case
    if (peekToken(tokens, TokenType.LBracket{})) {
      i := Initializer{}
      typ := ""
      typ, tokens = parseType(tokens)
      i, tokens = parseInitializer(tokens, typ)
      expr = Expr.Initializer { i }
    } else if (peekToken(tokens, TokenType.StringLiteral{})) {
      t, tokens = consumeToken(tokens, TokenType.StringLiteral{})
      expr = Expr.StringLiteral { t.Value }
    } else if (peekToken(tokens, TokenType.LCurly{})) {
      b := Block{}
      b, tokens = parseBlock(tokens)
      expr = Expr.Block { b }
    } else if (peekToken(tokens, TokenType.Ident{})) {
        t, tokens = consumeToken(tokens, TokenType.Ident{})
        expr = Expr.VarRef { t.Value }
    } else if (peekToken(tokens, TokenType.IntLiteral{})) {
        t, tokens = consumeToken(tokens, TokenType.IntLiteral{})
        expr = Expr.IntLiteral { atoi(t.Value) }
    } else {
        panic(fmt.Sprintf("unrecognized token when parsing expr: %#v", tokens[0]))
        //panic(fmt.Sprintf("unrecognized token when parsing expr: %#v. remaining tokens: %#v\n", tokens[0], tokens))
    }

    // after effects
    while {
        if (peekToken(tokens, TokenType.LParen{})) {
          funcCall := FuncCall{}
          funcCall, tokens = parseFuncCall(tokens, expr)
          expr = Expr.FuncCall { funcCall }
          continue
        } else if (peekToken(tokens, TokenType.BinaryOp{})) {
          t, tokens = consumeToken(tokens, TokenType.BinaryOp{})
          binop := BinOp {}
          binop.LHS = expr
          binop.Op = t.Value
          binop.RHS, tokens = parseExpr(tokens)
          expr = Expr.BinOp { binop }
          continue
        } else if (peekToken(tokens, TokenType.LBracket{})) {
          t, tokens = consumeToken(tokens, TokenType.LBracket{})
          arrayAccess := ArrayAccess {}
          arrayAccess.LHS = expr
          arrayAccess.Index, tokens = parseExpr(tokens)
          t, tokens = consumeToken(tokens, TokenType.RBracket{})
          expr = Expr.ArrayAccess { arrayAccess }
          continue
        } else if (peekToken(tokens, TokenType.LCurly{})) {
            // or should we just go back and reparse as a type?
            typ := exprToType(expr)
            i := Initializer{}
            i, tokens = parseInitializer(tokens, typ)
            expr = Expr.Initializer { i }
        } else if (peekToken(tokens, TokenType.Dot{})) {
            dotAccess := DotAccess{}
            dotAccess.LHS = expr
            t, tokens = consumeToken(tokens, TokenType.Dot{})
            t, tokens = consumeToken(tokens, TokenType.Ident{})
            dotAccess.Field = t.Value
            expr = Expr.DotAccess { dotAccess }
        } else {
            break
        }
    }

    return expr, tokens
}

func exprToType(expr Expr) string {
  match (expr) {
    Expr.VarRef { v }: {
      return v
    },
    Expr.DotAccess { dotAccess }: {
      return exprToType(dotAccess.LHS) + "." + dotAccess.Field
    },
  }
  panic(fmt.Sprintf("trying to convert expr to type, unhandled expr: %#v", expr))
}

func parseFuncCall(tokens []Token, lhs Expr) (FuncCall, []Token) {
    t := Token{}
    t, tokens = consumeToken(tokens, TokenType.LParen{})
    funcCall := FuncCall{}
    funcCall.LHS = lhs
    while {
      if (peekToken(tokens, TokenType.RParen{})) {
        break
      }

      nextParam, tokens2 := parseExpr(tokens)
      funcCall.Params = append(funcCall.Params, nextParam)
      tokens = tokens2

      if (peekToken(tokens, TokenType.Comma{})) {
        t, tokens = consumeToken(tokens, TokenType.Comma{})
      } else {
        break
      }
    }
    t, tokens = consumeToken(tokens, TokenType.RParen{})
    return funcCall, tokens
}

enum Statement {
  Assignment(Assignment),
  While(While),
  If(If),
  Return(Return),
  Break,
  Continue,
  Expr(Expr),
  Match(Match),
}

struct Match {
    Matched Expr,
    Arms []MatchArm,
}

struct MatchArm {
    Pattern MatchPattern,
    Body Expr,
}

enum MatchPattern {
    Enum(EnumMatchPattern),
}

struct EnumMatchPattern {
    Type string,
    Binding string, // can be empty
}

func parseMatchPattern(tokens []Token) (MatchPattern, []Token) {
    emp := EnumMatchPattern{}
    emp.Type, tokens = parseType(tokens)
    t := Token{}
    t, tokens = consumeToken(tokens, TokenType.LCurly{})
    if (peekToken(tokens, TokenType.Ident{})) {
        t, tokens = consumeToken(tokens, TokenType.Ident{})
        emp.Binding = t.Value
    }
    t, tokens = consumeToken(tokens, TokenType.RCurly{})
    return MatchPattern.Enum { emp }, tokens
}

func parseMatch(tokens []Token) (Match, []Token) {
    t := Token{}
    t, tokens = consumeToken(tokens, TokenType.Match{})
    m := Match{}
    t, tokens = consumeToken(tokens, TokenType.LParen{})
    m.Matched, tokens = parseExpr(tokens)
    t, tokens = consumeToken(tokens, TokenType.RParen{})
    t, tokens = consumeToken(tokens, TokenType.LCurly{})
    while {
        if (peekToken(tokens, TokenType.RCurly{})) {
            break
        }
        arm := MatchArm{}
        arm.Pattern, tokens = parseMatchPattern(tokens)
        t, tokens = consumeToken(tokens, TokenType.Colon{})
        arm.Body, tokens = parseExpr(tokens)
        m.Arms = append(m.Arms, arm)
        if (not(peekToken(tokens, TokenType.Comma{}))) {
            break
        }
        t, tokens = consumeToken(tokens, TokenType.Comma{})
    }
    t, tokens = consumeToken(tokens, TokenType.RCurly{})
    return m, tokens
}

struct Return {
  Exprs []Expr,
}

struct Block {
  Statements []Statement,
}

struct While {
    Body Block,
}

func parseIf(tokens []Token) (If, []Token) {
    t := Token{}
    t, tokens = consumeToken(tokens, TokenType.If{})
    i := If {}
    t, tokens = consumeToken(tokens, TokenType.LParen{})
    i.Cond, tokens = parseExpr(tokens)
    t, tokens = consumeToken(tokens, TokenType.RParen{})
    i.IfBody, tokens = parseExpr(tokens)

    if (peekToken(tokens, TokenType.Else{})) {
        t, tokens = consumeToken(tokens, TokenType.Else{})
        i.ElseBody, tokens = parseStatement(tokens)
    }

    return i, tokens
}

func parseWhile(tokens []Token) (While, []Token) {
    t := Token{}
    t, tokens = consumeToken(tokens, TokenType.While{})
    w := While {}
    w.Body, tokens = parseBlock(tokens)
    return w, tokens
}

func parseBlock(tokens []Token) (Block, []Token) {
    stmts := []Statement{}
    t := Token{}
    t, tokens = consumeToken(tokens, TokenType.LCurly{})

    while {
        tokens = skipNewlines(tokens)
        stmt, tokens2 := parseStatement(tokens)
        tokens = tokens2
        stmts = append(stmts, stmt)
        if (peekToken(tokens, TokenType.RCurly{})) {
            break
        }
    }

    t, tokens = consumeToken(tokens, TokenType.RCurly{})
    return Block{stmts}, tokens
}

struct Program {
	Declarations []Declaration,
}

struct Import {
  Path string,
}

struct Enum {
	Name string,
	Variants []EnumVariant,
}

struct EnumVariant {
    Name string,
    Type string, // TODO: this should be a Type probably?   (can be empty)
}

struct Struct {
    Name string,
    Fields []StructField,
}

struct StructField {
    Name string,
    Type string, // TODO: this should be a Type probably?
}

func parseImport(tokens []Token) (Import, []Token) {
  t, tokens := consumeToken(tokens, TokenType.Import{})
  t, tokens = consumeToken(tokens, TokenType.StringLiteral{})
  name := t.Value
  return Import{name}, tokens
}

func parseEnum(tokens []Token) (Enum, []Token) {
  t, tokens := consumeToken(tokens, TokenType.EnumDecl{})
  t, tokens = consumeToken(tokens, TokenType.Ident{})
  e := Enum{}
  e.Name = t.Value
  t, tokens = consumeToken(tokens, TokenType.LCurly{})
  while {
    if (peekToken(tokens, TokenType.RCurly{})) {
      t, tokens = consumeToken(tokens, TokenType.RCurly{})
      break
    }
    t, tokens = consumeToken(tokens, TokenType.Ident{})
    variant := EnumVariant{}
    variant.Name = t.Value

    if (peekToken(tokens, TokenType.LParen{})) {
      t, tokens = consumeToken(tokens, TokenType.LParen{})
      typ := ""
      typ, tokens = parseType(tokens)
      variant.Type = typ
      t, tokens = consumeToken(tokens, TokenType.RParen{})
    }

    e.Variants = append(e.Variants, variant)
    t, tokens = consumeToken(tokens, TokenType.Comma{})
  }
  return e, tokens
}

func parseStruct(tokens []Token) (Struct, []Token) {
  t, tokens := consumeToken(tokens, TokenType.Struct{})
  t, tokens = consumeToken(tokens, TokenType.Ident{})
  s := Struct{}
  s.Name = t.Value
  t, tokens = consumeToken(tokens, TokenType.LCurly{})
  while {
    if (peekToken(tokens, TokenType.RCurly{})) {
      t, tokens = consumeToken(tokens, TokenType.RCurly{})
      break
    }
    field := StructField{}
    t, tokens = consumeToken(tokens, TokenType.Ident{})
    field.Name = t.Value
    field.Type, tokens = parseType(tokens)
    s.Fields = append(s.Fields, field)
    t, tokens = consumeToken(tokens, TokenType.Comma{})
  }
  return s, tokens
}

func parseType(tokens []Token) (string, []Token) {
  // TODO: handle pointers
  name := ""
  t := Token{}
  while {
    if (peekToken(tokens, TokenType.Ident{})) {
      t, tokens = consumeToken(tokens, TokenType.Ident{})
      name = name + t.Value
    } else if (peekToken(tokens, TokenType.LBracket{})) {
      t, tokens = consumeToken(tokens, TokenType.LBracket{})
      name = name + t.Value
    } else if (peekToken(tokens, TokenType.RBracket{})) {
      t, tokens = consumeToken(tokens, TokenType.RBracket{})
      name = name + t.Value
    } else if (peekToken(tokens, TokenType.Dot{})) {
      t, tokens = consumeToken(tokens, TokenType.Dot{})
      name = name + t.Value
    } else {
      break
    }
  }
  return name, tokens
}

func parseFunction(tokens []Token) (Function, []Token) {
    t, tokens := consumeToken(tokens, TokenType.FuncDecl{})
    t, tokens = consumeToken(tokens, TokenType.Ident{})
    f := Function{}
    f.Name = t.Value
    t, tokens = consumeToken(tokens, TokenType.LParen{})
    while {
        if (peekToken(tokens, TokenType.RParen{})) {
          t, tokens = consumeToken(tokens, TokenType.RParen{})
          break
        }
        param := FunctionParam{}
        t, tokens = consumeToken(tokens, TokenType.Ident{})
        param.Name = t.Value
        param.Type, tokens = parseType(tokens)
        f.Params = append(f.Params, param)
        if (peekToken(tokens, TokenType.Comma{})) {
          t, tokens = consumeToken(tokens, TokenType.Comma{})
        }
    }

    if (not(peekToken(tokens, TokenType.LCurly{}))) {
        typ := ""
        f.ReturnTypes, tokens = parseReturnTypes(tokens)
    }

    f.Body, tokens = parseBlock(tokens)
    return f, tokens
}

func parseReturnTypes(tokens []Token) ([]string, []Token) {
    types := []string{}
    typ := ""
    t := Token{}
    if (peekToken(tokens, TokenType.LParen{})) {
      t, tokens = consumeToken(tokens, TokenType.LParen{})
      while {
        typ, tokens = parseType(tokens)
        types = append(types, typ)
        if (peekToken(tokens, TokenType.Comma{})) {
          t, tokens = consumeToken(tokens, TokenType.Comma{})
        } else {
          break
        }
      }
      t, tokens = consumeToken(tokens, TokenType.RParen{})
    } else {
        typ, tokens = parseType(tokens)
        types = append(types, typ)
    }
    return types, tokens
}

func parseDeclaration(tokens []Token) (Declaration, []Token) {
	match (tokens[0].Type) {
		TokenType.Import{}: {
		  imp, tokens := parseImport(tokens)
		  return Declaration.Import { imp }, tokens
        },
        TokenType.EnumDecl{}: {
          e, tokens := parseEnum(tokens)
          return Declaration.Enum { e }, tokens
	    },
	    TokenType.Struct{}: {
          s, tokens := parseStruct(tokens)
          return Declaration.Struct { s }, tokens
	    },
	    TokenType.FuncDecl{}: {
	      f, tokens := parseFunction(tokens)
	      return Declaration.Function { f }, tokens
	    },
	}
  panic(fmt.Sprintf("unexpected token: %#v", tokens[0]))
}

func parseProgram(tokens []Token) Program {
	p := Program{}
	while {
	  tokens = skipNewlines(tokens)
	  if (len(tokens) == 0) {
          break
	  }

	  declaration, tokens2 := parseDeclaration(tokens)
	  tokens = tokens2
	  p.Declarations = append(p.Declarations, declaration)
	}
	return p
}

func skipNewlines(tokens []Token) []Token {
	while {
      if (len(tokens) == 0) {
          return tokens
      }
	  match (tokens[0].Type) {
	    TokenType.Newline{}: {
	      tokens = slice(tokens, 1)
	      continue
      },
	  }
	  break
	}
	return tokens
}

func peekTokens(tokens []Token, expectedTypes []TokenType) bool {
    i := 0
    while {
        if (i >= len(expectedTypes)) {
            return true
        }
        if (len(tokens) == 0) {
            return false
        }
        if (tokens[i].Type != expectedTypes[i]) {
            return false
        }
        i = i + 1
    }
}

func peekToken(tokens []Token, expectedType TokenType) bool {
	if (len(tokens) == 0) {
		panic("Unexpected end of input")
	}
	nl := TokenType.Newline{}
	if (expectedType != nl) {
	  tokens = skipNewlines(tokens)
	}
	return tokens[0].Type == expectedType
}

func consumeToken(tokens []Token, expectedType TokenType) (Token, []Token) {
  if (len(tokens) == 0) {
    panic("Unexpected end of input")
  }
  nl := TokenType.Newline{}
  if (expectedType != nl) {
    tokens = skipNewlines(tokens)
  }
  if (tokens[0].Type != expectedType) {
		//panic(fmt.Sprintf("Was expecting token %#v, got %#v.\nremaining tokens: %#v", expectedType, tokens[0], tokens))
		panic(fmt.Sprintf("Was expecting token %#v, got %#v", expectedType, tokens[0]))
  }
  return tokens[0], slice(tokens, 1)
}

func compile(program Program) string {
    s := "package main\n\n"
    i := 0
    while {
        if (i >= len(program.Declarations)) {
            break
        }
        // used local variables here because the old compiler is busted
        d := program.Declarations[i]
        compiled := compileDeclaration(d)
        s = s + compiled
        s = s + "\n"
        i = i + 1
    }
    s = s + prelude()
    return s
}

func compileDeclaration(d Declaration) string {
    match (d) {
        Declaration.Enum { e }: {
            return compileEnum(e)
        },
        Declaration.Import { imp }: {
            return compileImport(imp)
        },
        Declaration.Struct { s }: {
            return compileStruct(s)
        },
        Declaration.Function { f }: {
            return compileFunction(f)
        },
    }
    // TODO: shouldn't have to do this because match is exhaustive
    panic("unreachable")
}

func golangInterfaceName(e Enum) string {
  return e.Name
}

func golangEnumImplementsInterfaceMethodName(e Enum) string {
  return "_implements" + golangInterfaceName(e)
}

func compileEnum(e Enum) string {
    return compileEnumInterface(e) + compileEnumStructs(e)
}

func compileImport(imp Import) string {
    return "import " + imp.Path
}

func compileStruct(strukt Struct) string {
    s := "type " + strukt.Name + " struct {\n"
    i := 0
    while {
        if (i >= len(strukt.Fields)) {
            break
        }
        field := strukt.Fields[i]
        typ := field.Type
        s = s + field.Name + " " + compileType(typ) + "\n"
        i = i + 1
    }
    s = s + "}\n"
    return s
}

func compileFunction(f Function) string {
    s := "func " + f.Name + "("
    i := 0
    while {
        if (i >= len(f.Params)) {
            break
        }
        param := f.Params[i]
        typ := param.Type
        s = s + param.Name + " " + compileType(typ)
        if (i < len(f.Params) - 1) {
            s = s + ", "
        }
        i = i + 1
    }

    returnTypes := f.ReturnTypes
    body := f.Body
    s = s + ") " + compileReturnTypes(returnTypes) + compileBlock(body)
    return s
}

func compileBlock(b Block) string {
    s := "{\n"
    i := 0
    while {
        if (i >= len(b.Statements)) {
            break
        }
        statement := b.Statements[i]
        s = s + compileStatement(statement)
        s = s + "\n"
        i = i + 1
    }
    s = s + "}\n"
    return s
}

func compileStatement(stmt Statement) string {
    match (stmt) {
        Statement.Assignment { assignment }: {
            return compileAssignment(assignment)
        },
        Statement.While { w }: {
            return compileWhile(w)
        },
        Statement.If { ifStmt }: {
            return compileIf(ifStmt)
        },
        Statement.Return { r }: {
            return compileReturn(r)
        },
        Statement.Break { }: {
            return "break"
        },
        Statement.Continue { }: {
            return "continue"
        },
        Statement.Expr { expr }: {
            return compileExpr(expr)
        },
        Statement.Match { m }: {
            return compileMatch(m)
        },
    }
    panic(fmt.Sprintf("unreachable, must not have handled a type of statement: %#v", stmt))
}

func MatchExprVarName() string {
    return "matchExpr"
}

func BindingVarName() string {
    return "binding"
}

func compileMatch(m Match) string {
    // create a new anonymous block
    s := "{\n"

    matched := m.Matched
    s = s + MatchExprVarName() + " := " + compileExpr(matched) + "\n"
    // TODO: probably need stfu in here

    i := 0
    arms := m.Arms
    while {
        if (i >= len(arms)) {
            break
        }

        arm := arms[i]
        if (i == 0) {
            s = s + "if "
        } else {
            s = s + " else if "
        }
        pat := arm.Pattern
        s = s + compileMatchPatternTestExpr(pat) + " {\n"
        s = s + stfuUnusedVars(LValue.Variable { BindingVarName() }) + "\n"
        s = s + compileBindingForMatchPattern(pat)
        body := arm.Body
        s = s + compileExpr(body)
        s = s + "\n}"

        i = i + 1
    }

    // end of new anonymous block
    s = s + "\n}"
    return s
}

func compileBindingForMatchPattern(pattern MatchPattern) string {
    match (pattern) {
        MatchPattern.Enum { emp }: {
            if (emp.Binding == "") {
                return ""
            }
            // TODO: should we output this using the thing that already outputs assignments?
            s := emp.Binding + " := " + BindingVarName() + ".Value\n"
            s = s + stfuUnusedVars(LValue.Variable { emp.Binding }) + "\n"
            return s
        },
    }
    panic(fmt.Sprintf("unreachable, must not have handled a type of match pattern: %#v", pattern))
}

func compileMatchPatternTestExpr(pattern MatchPattern) string {
    match (pattern) {
        MatchPattern.Enum { emp }: {
            typ := emp.Type
            s := BindingVarName() + ", ok := " + MatchExprVarName() + ".(" + compileType(typ) + ")"
            s = s + "; ok"
            return s
        },
    }
    panic(fmt.Sprintf("unreachable, must not have handled a type of match pattern: %#v", pattern))
}

func compileReturn(r Return) string {
    s := "return "
    exprs := r.Exprs
    if (len(exprs) == 0) {
        return s
    } else {
        return s + compileExprsCSV(exprs)
    }
}

func compileExprsCSV(exprs []Expr) string {
    s := ""
    i := 0
    while {
        if (i >= len(exprs)) {
            break
        }
        expr := exprs[i]
        s = s + compileExpr(expr)
        if (i < len(exprs) - 1) {
            s = s + ", "
        }
        i = i + 1
    }
    return s
}

func compileWhile(w While) string {
    body := w.Body
    return "for " + compileBlock(body)
}

func compileIf(ifStmt If) string {
    s := "if "
    cond := ifStmt.Cond
    s = s + compileExpr(cond)
    s = s + " {\n"
    ifBody := ifStmt.IfBody
    s = s + compileExpr(ifBody)
    s = s + "\n}"
    elseBody := ifStmt.ElseBody
    if (elseBody != nil) {
        s = s + "else {\n"
        s = s + compileStatement(elseBody)
        s = s + "\n}"
    }
    return s
}

func compileAssignment(ass Assignment) string {
    lValues := ass.LValues
    s := compileLValues(lValues)
    if (ass.IsReassignment) {
        s = s + " = "
    } else {
        s = s + " := "
    }
    rValue := ass.RValue
    s = s + compileExpr(rValue) + "\n"

    i := 0
    while {
        if (i >= len(lValues)) {
            break
        }
        lValue := lValues[i]
        s = s + stfuUnusedVars(lValue) + "\n"
        i = i + 1
    }

    return s
}

// TODO: only stfu Var lvalues not dot lvalues
func stfuUnusedVars(lValue LValue) string {
    return "_ = " + compileLValue(lValue)
}

func compileExpr(expr Expr) string {
    match (expr) {
        Expr.VarRef { s }: {
            return s
        },
        Expr.FuncCall { funcCall }: {
            lhs := funcCall.LHS
            s := compileExpr(lhs) + "("
            params := funcCall.Params
            s = s + compileExprsCSV(params)
            s = s + ")"
            return s
        },
        Expr.IntLiteral { i }: {
            return strconv.Itoa(i)
        },
        Expr.BinOp { binop }: {
            lhs := binop.LHS
            rhs := binop.RHS
            op := binop.Op
            return compileExpr(lhs) + " " + op + " " + compileExpr(rhs)
        },
        Expr.Block { block }: {
            return compileBlock(block)
        },
        Expr.ArrayAccess { aa }: {
            lhs := aa.LHS
            index := aa.Index
            return compileExpr(lhs) + "[" + compileExpr(index) + "]"
        },
        Expr.Initializer { init }: {
            typ := init.Type
            s := compileType(typ) + "{ "
            params := init.Params
            s = s + compileExprsCSV(params)
            s = s + " }"
            return s
        },
        Expr.StringLiteral { sl }: {
            return sl
        },
        Expr.DotAccess { da }: {
            lhs := da.LHS
            field := da.Field
            return compileExpr(lhs) + "." + field
        },
    }
    panic(fmt.Sprintf("unhandled expr: %#v", expr))
}

func compileLValue(lValue LValue) string {
    match (lValue) {
        LValue.Variable { s }: {
            return s
        },
        LValue.Dot { dotLValue }: {
            lhs := dotLValue.LHS
            rhs := dotLValue.RHS
            return compileLValue(lhs) + "." + compileLValue(rhs)
        },
    }
    panic("unreachable")
}

func compileLValues(lValues []LValue) string {
    if (len(lValues) == 0) {
        panic("must have at least one lvalue")
    } else if (len(lValues) == 1) {
        return compileLValue(lValues[0])
    } else {
        s := ""
        i := 0
        while {
            if (i >= len(lValues)) {
                break
            }
            s = s + compileLValue(lValues[i])
            if (i < len(lValues) - 1) {
                s = s + ", "
            }
            i = i + 1
        }
        return s
    }
}

func compileReturnTypes(returnTypes []string) string {
    if (len(returnTypes) == 0) {
        return ""
    }
    if (len(returnTypes) == 1) {
        return returnTypes[0]
    }
    s := "("
    i := 0
    while {
        if (i >= len(returnTypes)) {
            break
        }
        s = s + compileType(returnTypes[i])
        if (i < len(returnTypes) - 1) {
            s = s + ", "
        }
        i = i + 1
    }
    s = s + ")"
    return s
}

func compileType(typ string) string {
    s := ""
    i := 0
    while {
        if (i >= len(typ)) {
            break
        }
        if (typ[i] != c(".")) {
            s = s + string(typ[i])
        }
        i = i + 1
    }
    return s
}

func compileEnumInterface(e Enum) string {
  s := "type " + golangInterfaceName(e) + " interface {\n"
  s = s + golangEnumImplementsInterfaceMethodName(e) + "()\n"
  s = s + "}\n"
  return s
}

func structNameForVariant(e Enum, v EnumVariant) string {
  return e.Name + v.Name
}

func compileEnumStructs(e Enum) string {
  s := ""
  i := 0
  while {
    if (i >= len(e.Variants)) {
      break
    }

    // struct definition
    variant := e.Variants[i]
    structName := structNameForVariant(e, variant)
    s = s + "type " + structName + " struct {\n"
    if (variant.Type != "") {
        typ := variant.Type
        s = s + "Value " + compileType(typ) + "\n"
    }
    s = s + "}\n"

    // implement interface
    s = s + "func (_ " + structName + ") " + golangEnumImplementsInterfaceMethodName(e) + "() {}\n"

    i = i + 1
  }
  return s
}

func main() {
  if (len(os.Args) < 2) {
    fmt.Printf("Usage: ./%s <filename.goy>\n", os.Args[0])
    return
  }

	dat, err := os.ReadFile(os.Args[1])
	if (err != nil) {
		panic(err)
	}
	tokens := lex(dat)
	program := parseProgram(tokens)
	fmt.Println(compile(program))
}

func prelude() string {
	return `func slice[T any](s []T, i... int) []T {
	if len(i) == 0 {
		return s
	}
	if len(i) == 1 {
		return s[i[0]:]
	}
	if len(i) > 2 {
		panic("slice takes at most 2 arguments")
	}
    return s[i[0]:i[1]]
}

func atoi(s string) int {
	var i int
	for _, c := range s {
		i *= 10
		i += int(c - '0')
	}
	return i
}

func isDigit(c byte) bool {
	return c >= '0' && c <= '9'
}

func isAlpha(b byte) bool {
	return (b >= 'a' && b <= 'z') || (b >= 'A' && b <= 'Z')
}

func not(b bool) bool {
	return !b
}

func c(s string) byte {
	return s[0]
}

func nc(bs []byte, i int, s string) bool {
	for j, c := range s {
		if bs[i+j] != byte(c) {
			return false
		}
	}
	return true
}

func sprintf(format string, args ...interface{}) string {
	return fmt.Sprintf(format, args...)
}

func print(args ...interface{}) {
	for _, arg := range args {
		fmt.Printf("%#v\n", arg)
	}
	return
}

func bs(s string) []byte {
	return []byte(s)
}
`
}
