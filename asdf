+ mkdir -p build
+ go run ./compiler.go ./goylang.go ./imports.go ./lexer.go ./parser.go ./lexer.goy
assignType Assignment
lValues: []string{"imax"}
assignType Assignment
lValues: []string{"i"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"b"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"i"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"binaryOps"}
assignType Assignment
lValues: []string{"i"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"i"}
assignType Assignment
lValues: []string{"tokens"}
assignType Assignment
lValues: []string{"i"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"i"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"i"}
assignType Assignment
lValues: []string{"ident"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"ident"}
assignType Reassignment
lValues: []string{"i"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"tokens"}
assignType Reassignment
lValues: []string{"tokens"}
assignType Reassignment
lValues: []string{"tokens"}
assignType Reassignment
lValues: []string{"tokens"}
assignType Reassignment
lValues: []string{"tokens"}
assignType Reassignment
lValues: []string{"tokens"}
assignType Reassignment
lValues: []string{"tokens"}
assignType Reassignment
lValues: []string{"tokens"}
assignType Reassignment
lValues: []string{"tokens"}
assignType Reassignment
lValues: []string{"tokens"}
assignType Reassignment
lValues: []string{"tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"n"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"n"}
assignType Reassignment
lValues: []string{"i"}
assignType Reassignment
lValues: []string{"tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"tokens"}
assignType Reassignment
lValues: []string{"i"}
assignType Reassignment
lValues: []string{"tokens"}
assignType Reassignment
lValues: []string{"i"}
assignType Reassignment
lValues: []string{"tokens"}
assignType Reassignment
lValues: []string{"i"}
assignType Reassignment
lValues: []string{"tokens"}
assignType Reassignment
lValues: []string{"i"}
assignType Reassignment
lValues: []string{"tokens"}
assignType Reassignment
lValues: []string{"i"}
assignType Reassignment
lValues: []string{"tokens"}
assignType Reassignment
lValues: []string{"i"}
assignType Reassignment
lValues: []string{"tokens"}
assignType Reassignment
lValues: []string{"i"}
assignType Reassignment
lValues: []string{"tokens"}
assignType Reassignment
lValues: []string{"i"}
assignType Reassignment
lValues: []string{"tokens"}
assignType Reassignment
lValues: []string{"i"}
assignType Reassignment
lValues: []string{"tokens"}
assignType Reassignment
lValues: []string{"i"}
assignType Reassignment
lValues: []string{"tokens"}
assignType Reassignment
lValues: []string{"i"}
assignType Assignment
lValues: []string{"str"}
assignType Reassignment
lValues: []string{"i"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"str"}
assignType Reassignment
lValues: []string{"i"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"str"}
assignType Reassignment
lValues: []string{"i"}
assignType Reassignment
lValues: []string{"str"}
assignType Reassignment
lValues: []string{"i"}
assignType Reassignment
lValues: []string{"tokens"}
assignType Assignment
lValues: []string{"str"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"tokens"}
assignType Reassignment
lValues: []string{"i"}
assignType Reassignment
lValues: []string{"tokens"}
assignType Reassignment
lValues: []string{"i"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"t"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string{"r"}
assignType Reassignment
lValues: []string{"r.Expr", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"w", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"i", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"r", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"isAssignment"}
assignType Assignment
lValues: []string{"ass"}
assignType Reassignment
lValues: []string{"isAssignment", "ass", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"origTokens"}
assignType Assignment
lValues: []string{"lValues"}
assignType Assignment
lValues: []string{"t"}
assignType Assignment
lValues: []string{"ass"}
assignType Reassignment
lValues: []string{"ass.IsReassignment"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"ass.IsReassignment"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Reassignment
lValues: []string{"lValues"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"ass.IsReassignment"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Reassignment
lValues: []string{"lValues"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Reassignment
lValues: []string{"lValues"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"ass.RValue", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"t"}
assignType Assignment
lValues: []string{"i"}
assignType Reassignment
lValues: []string{"i.Type", "tokens"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"arg", "tokens2"}
assignType Reassignment
lValues: []string{"tokens"}
assignType Reassignment
lValues: []string{"i.Params"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"t"}
assignType Assignment
lValues: []string{"expr"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"i"}
assignType Reassignment
lValues: []string{"i", "tokens"}
assignType Reassignment
lValues: []string{"expr"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Reassignment
lValues: []string{"expr"}
assignType Assignment
lValues: []string{"b"}
assignType Reassignment
lValues: []string{"b", "tokens"}
assignType Reassignment
lValues: []string{"expr"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Reassignment
lValues: []string{"expr"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Reassignment
lValues: []string{"expr"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"funcCall"}
assignType Reassignment
lValues: []string{"funcCall", "tokens"}
assignType Reassignment
lValues: []string{"expr"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string{"binop"}
assignType Reassignment
lValues: []string{"binop.LHS"}
assignType Reassignment
lValues: []string{"binop.Op"}
assignType Reassignment
lValues: []string{"binop.RHS", "tokens"}
assignType Reassignment
lValues: []string{"expr"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string{"arrayAccess"}
assignType Reassignment
lValues: []string{"arrayAccess.LHS"}
assignType Reassignment
lValues: []string{"arrayAccess.Index", "tokens"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Reassignment
lValues: []string{"expr"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"t"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string{"funcCall"}
assignType Reassignment
lValues: []string{"funcCall.LHS"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"nextParam", "tokens2"}
assignType Reassignment
lValues: []string{"funcCall.Params"}
assignType Reassignment
lValues: []string{"tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"t"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string{"i"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Reassignment
lValues: []string{"i.Cond", "tokens"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Reassignment
lValues: []string{"i.IfBody", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Reassignment
lValues: []string{"i.ElseBody", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"t"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string{"w"}
assignType Reassignment
lValues: []string{"w.Body", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"stmts"}
assignType Assignment
lValues: []string{"t"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"tokens"}
assignType Assignment
lValues: []string{"stmt", "tokens2"}
assignType Reassignment
lValues: []string{"tokens"}
assignType Reassignment
lValues: []string{"stmts"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"t", "tokens"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string{"name"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"t", "tokens"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string{"e"}
assignType Reassignment
lValues: []string{"e.Name"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string{"variant"}
assignType Reassignment
lValues: []string{"variant.Name"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string{"typ"}
assignType Reassignment
lValues: []string{"typ", "tokens"}
assignType Reassignment
lValues: []string{"variant.Type"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Reassignment
lValues: []string{"e.Variants"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"t", "tokens"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string{"s"}
assignType Reassignment
lValues: []string{"s.Name"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"field"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Reassignment
lValues: []string{"field.Name"}
assignType Reassignment
lValues: []string{"field.Type", "tokens"}
assignType Reassignment
lValues: []string{"s.Fields"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"name"}
assignType Assignment
lValues: []string{"t"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Reassignment
lValues: []string{"name"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Reassignment
lValues: []string{"name"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Reassignment
lValues: []string{"name"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"t", "tokens"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string{"f"}
assignType Reassignment
lValues: []string{"f.Name"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"param"}
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Reassignment
lValues: []string{"param.Name"}
assignType Reassignment
lValues: []string{"param.Type", "tokens"}
assignType Reassignment
lValues: []string{"f.Params"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"typ"}
assignType Reassignment
lValues: []string{"f.Returns", "tokens"}
assignType Reassignment
lValues: []string{"f.Body", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"types"}
assignType Assignment
lValues: []string{"typ"}
assignType Assignment
lValues: []string{"t"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"typ", "tokens"}
assignType Reassignment
lValues: []string{"types"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"t", "tokens"}
assignType Reassignment
lValues: []string{"typ", "tokens"}
assignType Reassignment
lValues: []string{"types"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"imp", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"e", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"s", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"f", "tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"p"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"declaration", "tokens2"}
assignType Reassignment
lValues: []string{"tokens"}
assignType Reassignment
lValues: []string{"p.Declarations"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"i"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"i"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"nl"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"nl"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Reassignment
lValues: []string{"tokens"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"dat", "err"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string{"tokens"}
assignType Assignment
lValues: []string{"program"}
assignType Assignment
lValues: []string(nil)
parsing as expr instead
assignType Assignment
lValues: []string(nil)
parsing as expr instead
unknown: 
&main.VarRefExpr{VarName:"len"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"isDigit"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"isAlpha"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"len"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"nc"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"len"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"nc"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"nc"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"nc"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"nc"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"isAlpha"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
callable
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"string"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"string"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"string"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"string"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"string"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"string"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"string"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"string"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"string"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"string"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"string"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"string"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"string"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"string"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"string"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"string"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"string"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"string"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"string"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"string"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"string"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"isDigit"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"isDigit"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"string"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"nc"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"nc"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"nc"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"nc"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"nc"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"nc"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"nc"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"nc"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"nc"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"nc"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"nc"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"nc"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"bs"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"nc"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"nc"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"string"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
callable
unknown: 
&main.VarRefExpr{VarName:"len"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"len"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"nc"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"panic"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"sprintf"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
callable
callable
callable
callable
callable
callable
callable
callable
callable
callable
callable
callable
callable
unknown: 
&main.VarRefExpr{VarName:"panic"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
callable
callable
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
callable
callable
callable
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
callable
callable
callable
callable
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
callable
callable
callable
callable
callable
callable
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
callable
callable
callable
callable
callable
callable
callable
callable
callable
callable
callable
callable
callable
callable
unknown: 
&main.VarRefExpr{VarName:"atoi"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
callable
callable
callable
callable
callable
callable
callable
callable
callable
callable
callable
callable
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
callable
callable
callable
callable
callable
callable
callable
callable
callable
callable
callable
callable
callable
callable
callable
callable
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
callable
callable
callable
callable
callable
callable
callable
callable
callable
callable
callable
callable
callable
callable
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
callable
callable
callable
callable
callable
callable
callable
callable
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
callable
callable
callable
callable
callable
callable
callable
callable
callable
callable
callable
callable
callable
callable
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
callable
callable
unknown: 
&main.VarRefExpr{VarName:"not"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
callable
callable
callable
callable
callable
callable
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
callable
callable
callable
callable
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
callable
callable
callable
callable
unknown: 
&main.VarRefExpr{VarName:"panic"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
callable
unknown: 
&main.VarRefExpr{VarName:"len"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
callable
unknown: 
&main.VarRefExpr{VarName:"append"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"len"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"slice"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"len"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"len"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"len"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"panic"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
callable
unknown: 
&main.VarRefExpr{VarName:"len"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"panic"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
callable
unknown: 
&main.VarRefExpr{VarName:"panic"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"slice"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
callable
unknown: 
&main.VarRefExpr{VarName:"panic"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
callable
callable
unknown: 
&main.VarRefExpr{VarName:"print"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
unknown: 
&main.VarRefExpr{VarName:"print"} | &main.Type{Name:"", Unknown:true, Elided:false, Callable:false, CallableArgs:[]*main.Type(nil), CallableArgsIsVariadic:false, CallableReturns:[]*main.Type(nil), Package:false, PackageName:"", Imported:false, ImportedFrom:""}
+ gofmt -w build/main.go
+ cat build/main.go
package main

import os "os"
import fmt "fmt"

func slice[T any](s []T, i ...int) []T {
	if len(i) == 0 {
		return s
	}
	if len(i) == 1 {
		return s[i[0]:]
	}
	if len(i) > 2 {
		panic("slice takes at most 2 arguments")
	}
	return s[i[0]:i[1]]
}

func atoi(s string) int {
	var i int
	for _, c := range s {
		i *= 10
		i += int(c - '0')
	}
	return i
}

func isDigit(c byte) bool {
	return c >= '0' && c <= '9'
}

func isAlpha(b byte) bool {
	return (b >= 'a' && b <= 'z') || (b >= 'A' && b <= 'Z')
}

func not(b bool) bool {
	return !b
}

func c(s string) byte {
	return s[0]
}

func nc(bs []byte, i int, s string) bool {
	for j, c := range s {
		if bs[i+j] != byte(c) {
			return false
		}
	}
	return true
}

func sprintf(format string, args ...interface{}) string {
	return fmt.Sprintf(format, args...)
}

func print(args ...interface{}) {
	for _, arg := range args {
		fmt.Printf("%#v\n", arg)
	}
	return
}

func bs(s string) []byte {
	return []byte(s)
}

type TokenTypeType uint8

const (
	TokenTypeTypeFuncDecl = iota
	TokenTypeTypeLParen
	TokenTypeTypeRParen
	TokenTypeTypeLCurly
	TokenTypeTypeRCurly
	TokenTypeTypeLBracket
	TokenTypeTypeRBracket
	TokenTypeTypeIdent
	TokenTypeTypeIntLiteral
	TokenTypeTypeBinaryOp
	TokenTypeTypeNewline
	TokenTypeTypeComma
	TokenTypeTypeStringLiteral
	TokenTypeTypeEnumDecl
	TokenTypeTypeMatch
	TokenTypeTypeDot
	TokenTypeTypeColon
	TokenTypeTypeEquals
	TokenTypeTypeImport
	TokenTypeTypeStruct
	TokenTypeTypeWhile
	TokenTypeTypeIf
	TokenTypeTypeReturn
	TokenTypeTypeElse
	TokenTypeTypeBreak
	TokenTypeTypeContinue
)

type TokenType interface {
	TokenTypeTag() TokenTypeType
}
type TokenTypeFuncDecl struct {
}

func (i TokenTypeFuncDecl) TokenTypeTag() TokenTypeType {
	return TokenTypeTypeFuncDecl
}

type TokenTypeLParen struct {
}

func (i TokenTypeLParen) TokenTypeTag() TokenTypeType {
	return TokenTypeTypeLParen
}

type TokenTypeRParen struct {
}

func (i TokenTypeRParen) TokenTypeTag() TokenTypeType {
	return TokenTypeTypeRParen
}

type TokenTypeLCurly struct {
}

func (i TokenTypeLCurly) TokenTypeTag() TokenTypeType {
	return TokenTypeTypeLCurly
}

type TokenTypeRCurly struct {
}

func (i TokenTypeRCurly) TokenTypeTag() TokenTypeType {
	return TokenTypeTypeRCurly
}

type TokenTypeLBracket struct {
}

func (i TokenTypeLBracket) TokenTypeTag() TokenTypeType {
	return TokenTypeTypeLBracket
}

type TokenTypeRBracket struct {
}

func (i TokenTypeRBracket) TokenTypeTag() TokenTypeType {
	return TokenTypeTypeRBracket
}

type TokenTypeIdent struct {
}

func (i TokenTypeIdent) TokenTypeTag() TokenTypeType {
	return TokenTypeTypeIdent
}

type TokenTypeIntLiteral struct {
}

func (i TokenTypeIntLiteral) TokenTypeTag() TokenTypeType {
	return TokenTypeTypeIntLiteral
}

type TokenTypeBinaryOp struct {
}

func (i TokenTypeBinaryOp) TokenTypeTag() TokenTypeType {
	return TokenTypeTypeBinaryOp
}

type TokenTypeNewline struct {
}

func (i TokenTypeNewline) TokenTypeTag() TokenTypeType {
	return TokenTypeTypeNewline
}

type TokenTypeComma struct {
}

func (i TokenTypeComma) TokenTypeTag() TokenTypeType {
	return TokenTypeTypeComma
}

type TokenTypeStringLiteral struct {
}

func (i TokenTypeStringLiteral) TokenTypeTag() TokenTypeType {
	return TokenTypeTypeStringLiteral
}

type TokenTypeEnumDecl struct {
}

func (i TokenTypeEnumDecl) TokenTypeTag() TokenTypeType {
	return TokenTypeTypeEnumDecl
}

type TokenTypeMatch struct {
}

func (i TokenTypeMatch) TokenTypeTag() TokenTypeType {
	return TokenTypeTypeMatch
}

type TokenTypeDot struct {
}

func (i TokenTypeDot) TokenTypeTag() TokenTypeType {
	return TokenTypeTypeDot
}

type TokenTypeColon struct {
}

func (i TokenTypeColon) TokenTypeTag() TokenTypeType {
	return TokenTypeTypeColon
}

type TokenTypeEquals struct {
}

func (i TokenTypeEquals) TokenTypeTag() TokenTypeType {
	return TokenTypeTypeEquals
}

type TokenTypeImport struct {
}

func (i TokenTypeImport) TokenTypeTag() TokenTypeType {
	return TokenTypeTypeImport
}

type TokenTypeStruct struct {
}

func (i TokenTypeStruct) TokenTypeTag() TokenTypeType {
	return TokenTypeTypeStruct
}

type TokenTypeWhile struct {
}

func (i TokenTypeWhile) TokenTypeTag() TokenTypeType {
	return TokenTypeTypeWhile
}

type TokenTypeIf struct {
}

func (i TokenTypeIf) TokenTypeTag() TokenTypeType {
	return TokenTypeTypeIf
}

type TokenTypeReturn struct {
}

func (i TokenTypeReturn) TokenTypeTag() TokenTypeType {
	return TokenTypeTypeReturn
}

type TokenTypeElse struct {
}

func (i TokenTypeElse) TokenTypeTag() TokenTypeType {
	return TokenTypeTypeElse
}

type TokenTypeBreak struct {
}

func (i TokenTypeBreak) TokenTypeTag() TokenTypeType {
	return TokenTypeTypeBreak
}

type TokenTypeContinue struct {
}

func (i TokenTypeContinue) TokenTypeTag() TokenTypeType {
	return TokenTypeTypeContinue
}

type Token struct {
	Type  TokenType
	Value string
}

func eqany(xs []byte, x byte) bool {
	imax := len(xs)
	_ = imax

	i := 0
	_ = i

	for {
		if i == imax {
			return false
		}
		b := xs[i]
		_ = b

		if x == b {
			return true
		}
		i = i + 1
	}
}
func isAlphanumeric(b byte) bool {
	return isDigit(b) || isAlpha(b)
}
func peekBinaryOp(dat []byte, start int) string {
	binaryOps := []string{"+", "-", "*", "/", "%", "==", "!=", "<=", ">=", "&&", "||", "<", ">"}
	_ = binaryOps

	i := 0
	_ = i

	for {
		if i >= len(binaryOps) {
			return ""
		} else if nc(dat, start, binaryOps[i]) {
			return binaryOps[i]
		}
		i = i + 1
	}
}
func lex(dat []byte) []Token {
	tokens := []Token{}
	_ = tokens

	i := 0
	_ = i

	for {
		if i >= len(dat) {
			break
		} else if nc(dat, i, " ") || nc(dat, i, "\t") {
			i = i + 1
			continue
		} else if nc(dat, i, "//") {
			for {
				if nc(dat, i, "\n") {
					tokens = append(tokens, Token{TokenTypeNewline{}, "\n"})
					break
				} else {
					i = i + 1
				}
			}
		} else if isAlpha(dat[i]) {
			ident := []byte{}
			_ = ident

			for {
				if isAlphanumeric(dat[i]) {
					ident = append(ident, dat[i])
					i = i + 1
				} else {
					if string(ident) == "enum" {
						tokens = append(tokens, Token{TokenTypeEnumDecl{}, string(ident)})
					} else if string(ident) == "import" {
						tokens = append(tokens, Token{TokenTypeImport{}, string(ident)})
					} else if string(ident) == "struct" {
						tokens = append(tokens, Token{TokenTypeStruct{}, string(ident)})
					} else if string(ident) == "func" {
						tokens = append(tokens, Token{TokenTypeFuncDecl{}, string(ident)})
					} else if string(ident) == "while" {
						tokens = append(tokens, Token{TokenTypeWhile{}, string(ident)})
					} else if string(ident) == "if" {
						tokens = append(tokens, Token{TokenTypeIf{}, string(ident)})
					} else if string(ident) == "return" {
						tokens = append(tokens, Token{TokenTypeReturn{}, string(ident)})
					} else if string(ident) == "else" {
						tokens = append(tokens, Token{TokenTypeElse{}, string(ident)})
					} else if string(ident) == "break" {
						tokens = append(tokens, Token{TokenTypeBreak{}, string(ident)})
					} else if string(ident) == "continue" {
						tokens = append(tokens, Token{TokenTypeContinue{}, string(ident)})
					} else {
						tokens = append(tokens, Token{TokenTypeIdent{}, string(ident)})
					}
					break
				}
			}
			continue
		} else if isDigit(dat[i]) {
			n := []byte{}
			_ = n

			for {
				if isDigit(dat[i]) {
					n = append(n, dat[i])
					i = i + 1
				} else {
					tokens = append(tokens, Token{TokenTypeIntLiteral{}, string(n)})
					break
				}
			}
		} else if nc(dat, i, "{") {
			tokens = append(tokens, Token{TokenTypeLCurly{}, "{"})
			i = i + 1
		} else if nc(dat, i, "}") {
			tokens = append(tokens, Token{TokenTypeRCurly{}, "}"})
			i = i + 1
		} else if nc(dat, i, "[") {
			tokens = append(tokens, Token{TokenTypeLBracket{}, "["})
			i = i + 1
		} else if nc(dat, i, "]") {
			tokens = append(tokens, Token{TokenTypeRBracket{}, "]"})
			i = i + 1
		} else if nc(dat, i, "(") {
			tokens = append(tokens, Token{TokenTypeLParen{}, "("})
			i = i + 1
		} else if nc(dat, i, ")") {
			tokens = append(tokens, Token{TokenTypeRParen{}, ")"})
			i = i + 1
		} else if nc(dat, i, "\n") {
			tokens = append(tokens, Token{TokenTypeNewline{}, "\n"})
			i = i + 1
		} else if nc(dat, i, "\r\n") {
			tokens = append(tokens, Token{TokenTypeNewline{}, "\r\n"})
			i = i + 2
		} else if nc(dat, i, ",") {
			tokens = append(tokens, Token{TokenTypeComma{}, ","})
			i = i + 1
		} else if nc(dat, i, ":") {
			tokens = append(tokens, Token{TokenTypeColon{}, ":"})
			i = i + 1
		} else if nc(dat, i, ".") {
			tokens = append(tokens, Token{TokenTypeDot{}, "."})
			i = i + 1
		} else if nc(dat, i, "\"") {
			str := bs("\"")
			_ = str

			i = i + 1
			for {
				if nc(dat, i, "\"") {
					str = append(str, dat[i])
					i = i + 1
					break
				} else if nc(dat, i, "\\\"") {
					str = append(str, dat[i], dat[i+1])
					i = i + 2
				} else {
					str = append(str, dat[i])
					i = i + 1
				}
			}
			tokens = append(tokens, Token{TokenTypeStringLiteral{}, string(str)})
		} else {
			str := peekBinaryOp(dat, i)
			_ = str

			if len(str) > 0 {
				tokens = append(tokens, Token{TokenTypeBinaryOp{}, str})
				i = i + len(str)
			} else if nc(dat, i, "=") {
				tokens = append(tokens, Token{TokenTypeEquals{}, "="})
				i = i + 1
			} else {
				panic(sprintf("unexpected token: |%c|\n\ntokens so far: %#v", dat[i], tokens))
			}
		}
	}
	return tokens
}

type DeclarationType uint8

const (
	DeclarationTypeEnum = iota
	DeclarationTypeImport
	DeclarationTypeStruct
	DeclarationTypeFunction
)

type Declaration interface {
	DeclarationTag() DeclarationType
}
type DeclarationEnum struct {
	Value Enum
}

func (i DeclarationEnum) DeclarationTag() DeclarationType {
	return DeclarationTypeEnum
}

type DeclarationImport struct {
	Value Import
}

func (i DeclarationImport) DeclarationTag() DeclarationType {
	return DeclarationTypeImport
}

type DeclarationStruct struct {
	Value Struct
}

func (i DeclarationStruct) DeclarationTag() DeclarationType {
	return DeclarationTypeStruct
}

type DeclarationFunction struct {
	Value Function
}

func (i DeclarationFunction) DeclarationTag() DeclarationType {
	return DeclarationTypeFunction
}

type FunctionParam struct {
	Name string
	Type string
}

type Function struct {
	Name    string
	Params  []FunctionParam
	Returns []string
	Body    Block
}

type LValueType uint8

const (
	LValueTypeVariable = iota
)

type LValue interface {
	LValueTag() LValueType
}
type LValueVariable struct {
	Value string
}

func (i LValueVariable) LValueTag() LValueType {
	return LValueTypeVariable
}

type FuncCall struct {
	LHS    Expr
	Params []Expr
}

type ExprType uint8

const (
	ExprTypeVarRef = iota
	ExprTypeFuncCall
	ExprTypeIntLiteral
	ExprTypeBinOp
	ExprTypeBlock
	ExprTypeArrayAccess
	ExprTypeInitializer
	ExprTypeStringLiteral
)

type Expr interface {
	ExprTag() ExprType
}
type ExprVarRef struct {
	Value string
}

func (i ExprVarRef) ExprTag() ExprType {
	return ExprTypeVarRef
}

type ExprFuncCall struct {
	Value FuncCall
}

func (i ExprFuncCall) ExprTag() ExprType {
	return ExprTypeFuncCall
}

type ExprIntLiteral struct {
	Value int
}

func (i ExprIntLiteral) ExprTag() ExprType {
	return ExprTypeIntLiteral
}

type ExprBinOp struct {
	Value BinOp
}

func (i ExprBinOp) ExprTag() ExprType {
	return ExprTypeBinOp
}

type ExprBlock struct {
	Value Block
}

func (i ExprBlock) ExprTag() ExprType {
	return ExprTypeBlock
}

type ExprArrayAccess struct {
	Value ArrayAccess
}

func (i ExprArrayAccess) ExprTag() ExprType {
	return ExprTypeArrayAccess
}

type ExprInitializer struct {
	Value Initializer
}

func (i ExprInitializer) ExprTag() ExprType {
	return ExprTypeInitializer
}

type ExprStringLiteral struct {
	Value string
}

func (i ExprStringLiteral) ExprTag() ExprType {
	return ExprTypeStringLiteral
}

type Initializer struct {
	Type   string
	Params []Expr
}

type ArrayAccess struct {
	LHS   Expr
	Index Expr
}

type BinOp struct {
	LHS Expr
	RHS Expr
	Op  string
}

type Assignment struct {
	LValue         []LValue
	RValue         Expr
	IsReassignment bool
}

type If struct {
	Cond     Expr
	IfBody   Expr
	ElseBody Expr
}

func parseReturn(tokens []Token) (Return, []Token) {
	t := Token{}
	_ = t

	t, tokens = consumeToken(tokens, TokenTypeReturn{})
	r := Return{}
	_ = r

	r.Expr, tokens = parseExpr(tokens)
	return r, tokens
}
func parseStatement(tokens []Token) (Statement, []Token) {
	if peekToken(tokens, TokenTypeContinue{}) {
		t, tokens := consumeToken(tokens, TokenTypeContinue{})
		_ = t
		_ = tokens

		return StatementContinue{}, tokens
	} else if peekToken(tokens, TokenTypeBreak{}) {
		t, tokens := consumeToken(tokens, TokenTypeBreak{})
		_ = t
		_ = tokens

		return StatementBreak{}, tokens
	} else if peekToken(tokens, TokenTypeWhile{}) {
		w, tokens := parseWhile(tokens)
		_ = w
		_ = tokens

		return StatementWhile{w}, tokens
	} else if peekToken(tokens, TokenTypeIf{}) {
		i, tokens := parseIf(tokens)
		_ = i
		_ = tokens

		return StatementIf{i}, tokens
	} else if peekToken(tokens, TokenTypeReturn{}) {
		r, tokens := parseReturn(tokens)
		_ = r
		_ = tokens

		return StatementReturn{r}, tokens
	}
	isAssignment := false
	_ = isAssignment

	ass := Assignment{}
	_ = ass

	isAssignment, ass, tokens = tryParseAssignment(tokens)
	if isAssignment {
		return StatementAssignment{ass}, tokens
	}
	panic(fmt.Sprintf("trying to parse a statement, unhandled token: %#v", tokens[0]))
}
func tryParseAssignment(tokens []Token) (bool, Assignment, []Token) {
	origTokens := tokens
	_ = origTokens

	lValues := []LValue{}
	_ = lValues

	t := Token{}
	_ = t

	ass := Assignment{}
	_ = ass

	ass.IsReassignment = false
	for {
		if peekTokens(tokens, []TokenType{TokenTypeIdent{}, TokenTypeEquals{}}) {
			ass.IsReassignment = true
			t, tokens = consumeToken(tokens, TokenTypeIdent{})
			lValues = append(lValues, LValueVariable{t.Value})
			t, tokens = consumeToken(tokens, TokenTypeEquals{})
			break
		} else if peekTokens(tokens, []TokenType{TokenTypeIdent{}, TokenTypeColon{}, TokenTypeEquals{}}) {
			ass.IsReassignment = false
			t, tokens = consumeToken(tokens, TokenTypeIdent{})
			lValues = append(lValues, LValueVariable{t.Value})
			t, tokens = consumeToken(tokens, TokenTypeColon{})
			t, tokens = consumeToken(tokens, TokenTypeEquals{})
			break
		} else if peekTokens(tokens, []TokenType{TokenTypeIdent{}, TokenTypeComma{}}) {
			t, tokens = consumeToken(tokens, TokenTypeIdent{})
			lValues = append(lValues, LValueVariable{t.Value})
			t, tokens = consumeToken(tokens, TokenTypeComma{})
		} else {
			return false, Assignment{}, origTokens
		}
	}
	ass.RValue, tokens = parseExpr(tokens)
	return true, ass, tokens
}
func sentinelExprJank() Expr {
	return ExprVarRef{""}
}
func parseInitializer(tokens []Token) (Initializer, []Token) {
	t := Token{}
	_ = t

	i := Initializer{}
	_ = i

	i.Type, tokens = parseType(tokens)
	t, tokens = consumeToken(tokens, TokenTypeLCurly{})
	for {
		if peekToken(tokens, TokenTypeRCurly{}) {
			break
		}
		arg, tokens2 := parseExpr(tokens)
		_ = arg
		_ = tokens2

		tokens = tokens2
		i.Params = append(i.Params, arg)
		if peekToken(tokens, TokenTypeComma{}) {
			t, tokens = consumeToken(tokens, TokenTypeComma{})
		} else {
			break
		}
	}
	t, tokens = consumeToken(tokens, TokenTypeRCurly{})
	return i, tokens
}
func parseExpr(tokens []Token) (Expr, []Token) {
	t := Token{}
	_ = t

	expr := sentinelExprJank()
	_ = expr

	if peekToken(tokens, TokenTypeLBracket{}) {
		i := Initializer{}
		_ = i

		i, tokens = parseInitializer(tokens)
		expr = ExprInitializer{i}
	} else if peekToken(tokens, TokenTypeStringLiteral{}) {
		t, tokens = consumeToken(tokens, TokenTypeStringLiteral{})
		expr = ExprStringLiteral{t.Value}
	} else if peekToken(tokens, TokenTypeLCurly{}) {
		b := Block{}
		_ = b

		b, tokens = parseBlock(tokens)
		expr = ExprBlock{b}
	} else if peekToken(tokens, TokenTypeIdent{}) {
		t, tokens = consumeToken(tokens, TokenTypeIdent{})
		expr = ExprVarRef{t.Value}
	} else if peekToken(tokens, TokenTypeIntLiteral{}) {
		t, tokens = consumeToken(tokens, TokenTypeIntLiteral{})
		expr = ExprIntLiteral{atoi(t.Value)}
	}
	if peekToken(tokens, TokenTypeLParen{}) {
		funcCall := FuncCall{}
		_ = funcCall

		funcCall, tokens = parseFuncCall(tokens, expr)
		expr = ExprFuncCall{funcCall}
	}
	if peekToken(tokens, TokenTypeBinaryOp{}) {
		t, tokens = consumeToken(tokens, TokenTypeBinaryOp{})
		binop := BinOp{}
		_ = binop

		binop.LHS = expr
		binop.Op = t.Value
		binop.RHS, tokens = parseExpr(tokens)
		expr = ExprBinOp{binop}
	}
	if peekToken(tokens, TokenTypeLBracket{}) {
		t, tokens = consumeToken(tokens, TokenTypeLBracket{})
		arrayAccess := ArrayAccess{}
		_ = arrayAccess

		arrayAccess.LHS = expr
		arrayAccess.Index, tokens = parseExpr(tokens)
		t, tokens = consumeToken(tokens, TokenTypeRBracket{})
		expr = ExprArrayAccess{arrayAccess}
	}
	return expr, tokens
}
func parseFuncCall(tokens []Token, lhs Expr) (FuncCall, []Token) {
	t := Token{}
	_ = t

	t, tokens = consumeToken(tokens, TokenTypeLParen{})
	funcCall := FuncCall{}
	_ = funcCall

	funcCall.LHS = lhs
	for {
		if peekToken(tokens, TokenTypeRParen{}) {
			break
		}
		nextParam, tokens2 := parseExpr(tokens)
		_ = nextParam
		_ = tokens2

		funcCall.Params = append(funcCall.Params, nextParam)
		tokens = tokens2
		if peekToken(tokens, TokenTypeComma{}) {
			t, tokens = consumeToken(tokens, TokenTypeComma{})
		} else {
			break
		}
	}
	t, tokens = consumeToken(tokens, TokenTypeRParen{})
	return funcCall, tokens
}

type StatementType uint8

const (
	StatementTypeAssignment = iota
	StatementTypeWhile
	StatementTypeIf
	StatementTypeReturn
	StatementTypeBreak
	StatementTypeContinue
)

type Statement interface {
	StatementTag() StatementType
}
type StatementAssignment struct {
	Value Assignment
}

func (i StatementAssignment) StatementTag() StatementType {
	return StatementTypeAssignment
}

type StatementWhile struct {
	Value While
}

func (i StatementWhile) StatementTag() StatementType {
	return StatementTypeWhile
}

type StatementIf struct {
	Value If
}

func (i StatementIf) StatementTag() StatementType {
	return StatementTypeIf
}

type StatementReturn struct {
	Value Return
}

func (i StatementReturn) StatementTag() StatementType {
	return StatementTypeReturn
}

type StatementBreak struct {
}

func (i StatementBreak) StatementTag() StatementType {
	return StatementTypeBreak
}

type StatementContinue struct {
}

func (i StatementContinue) StatementTag() StatementType {
	return StatementTypeContinue
}

type Return struct {
	Expr Expr
}

type Block struct {
	Statements []Statement
}

type While struct {
	Body Block
}

func parseIf(tokens []Token) (If, []Token) {
	t := Token{}
	_ = t

	t, tokens = consumeToken(tokens, TokenTypeIf{})
	i := If{}
	_ = i

	t, tokens = consumeToken(tokens, TokenTypeLParen{})
	i.Cond, tokens = parseExpr(tokens)
	t, tokens = consumeToken(tokens, TokenTypeRParen{})
	i.IfBody, tokens = parseExpr(tokens)
	if peekToken(tokens, TokenTypeElse{}) {
		t, tokens = consumeToken(tokens, TokenTypeElse{})
		i.ElseBody, tokens = parseExpr(tokens)
	}
	return i, tokens
}
func parseWhile(tokens []Token) (While, []Token) {
	t := Token{}
	_ = t

	t, tokens = consumeToken(tokens, TokenTypeWhile{})
	w := While{}
	_ = w

	w.Body, tokens = parseBlock(tokens)
	return w, tokens
}
func parseBlock(tokens []Token) (Block, []Token) {
	stmts := []Statement{}
	_ = stmts

	t := Token{}
	_ = t

	t, tokens = consumeToken(tokens, TokenTypeLCurly{})
	for {
		tokens = skipNewlines(tokens)
		stmt, tokens2 := parseStatement(tokens)
		_ = stmt
		_ = tokens2

		tokens = tokens2
		stmts = append(stmts, stmt)
		if peekToken(tokens, TokenTypeRCurly{}) {
			break
		}
	}
	t, tokens = consumeToken(tokens, TokenTypeRCurly{})
	return Block{stmts}, tokens
}

type Program struct {
	Declarations []Declaration
}

type Import struct {
	Name string
}

type Enum struct {
	Name     string
	Variants []EnumVariant
}

type EnumVariant struct {
	Name string
	Type string
}

type Struct struct {
	Name   string
	Fields []StructField
}

type StructField struct {
	Name string
	Type string
}

func parseImport(tokens []Token) (Import, []Token) {
	t, tokens := consumeToken(tokens, TokenTypeImport{})
	_ = t
	_ = tokens

	t, tokens = consumeToken(tokens, TokenTypeStringLiteral{})
	name := t.Value
	_ = name

	return Import{name}, tokens
}
func parseEnum(tokens []Token) (Enum, []Token) {
	t, tokens := consumeToken(tokens, TokenTypeEnumDecl{})
	_ = t
	_ = tokens

	t, tokens = consumeToken(tokens, TokenTypeIdent{})
	e := Enum{}
	_ = e

	e.Name = t.Value
	t, tokens = consumeToken(tokens, TokenTypeLCurly{})
	for {
		if peekToken(tokens, TokenTypeRCurly{}) {
			t, tokens = consumeToken(tokens, TokenTypeRCurly{})
			break
		}
		t, tokens = consumeToken(tokens, TokenTypeIdent{})
		variant := EnumVariant{}
		_ = variant

		variant.Name = t.Value
		if peekToken(tokens, TokenTypeLParen{}) {
			t, tokens = consumeToken(tokens, TokenTypeLParen{})
			typ := ""
			_ = typ

			typ, tokens = parseType(tokens)
			variant.Type = typ
			t, tokens = consumeToken(tokens, TokenTypeRParen{})
		}
		e.Variants = append(e.Variants, variant)
		t, tokens = consumeToken(tokens, TokenTypeComma{})
	}
	return e, tokens
}
func parseStruct(tokens []Token) (Struct, []Token) {
	t, tokens := consumeToken(tokens, TokenTypeStruct{})
	_ = t
	_ = tokens

	t, tokens = consumeToken(tokens, TokenTypeIdent{})
	s := Struct{}
	_ = s

	s.Name = t.Value
	t, tokens = consumeToken(tokens, TokenTypeLCurly{})
	for {
		if peekToken(tokens, TokenTypeRCurly{}) {
			t, tokens = consumeToken(tokens, TokenTypeRCurly{})
			break
		}
		field := StructField{}
		_ = field

		t, tokens = consumeToken(tokens, TokenTypeIdent{})
		field.Name = t.Value
		field.Type, tokens = parseType(tokens)
		s.Fields = append(s.Fields, field)
		t, tokens = consumeToken(tokens, TokenTypeComma{})
	}
	return s, tokens
}
func parseType(tokens []Token) (string, []Token) {
	name := ""
	_ = name

	t := Token{}
	_ = t

	for {
		if peekToken(tokens, TokenTypeIdent{}) {
			t, tokens = consumeToken(tokens, TokenTypeIdent{})
			name = name + t.Value
		} else if peekToken(tokens, TokenTypeLBracket{}) {
			t, tokens = consumeToken(tokens, TokenTypeLBracket{})
			name = name + t.Value
		} else if peekToken(tokens, TokenTypeRBracket{}) {
			t, tokens = consumeToken(tokens, TokenTypeRBracket{})
			name = name + t.Value
		} else {
			break
		}
	}
	return name, tokens
}
func parseFunction(tokens []Token) (Function, []Token) {
	t, tokens := consumeToken(tokens, TokenTypeFuncDecl{})
	_ = t
	_ = tokens

	t, tokens = consumeToken(tokens, TokenTypeIdent{})
	f := Function{}
	_ = f

	f.Name = t.Value
	t, tokens = consumeToken(tokens, TokenTypeLParen{})
	for {
		if peekToken(tokens, TokenTypeRParen{}) {
			t, tokens = consumeToken(tokens, TokenTypeRParen{})
			break
		}
		param := FunctionParam{}
		_ = param

		t, tokens = consumeToken(tokens, TokenTypeIdent{})
		param.Name = t.Value
		param.Type, tokens = parseType(tokens)
		f.Params = append(f.Params, param)
		if peekToken(tokens, TokenTypeComma{}) {
			t, tokens = consumeToken(tokens, TokenTypeComma{})
		}
	}
	if not(peekToken(tokens, TokenTypeLCurly{})) {
		typ := ""
		_ = typ

		f.Returns, tokens = parseReturnTypes(tokens)
	}
	f.Body, tokens = parseBlock(tokens)
	return f, tokens
}
func parseReturnTypes(tokens []Token) ([]string, []Token) {
	types := []string{}
	_ = types

	typ := ""
	_ = typ

	t := Token{}
	_ = t

	if peekToken(tokens, TokenTypeLParen{}) {
		t, tokens = consumeToken(tokens, TokenTypeLParen{})
		for {
			typ, tokens = parseType(tokens)
			types = append(types, typ)
			if peekToken(tokens, TokenTypeComma{}) {
				t, tokens = consumeToken(tokens, TokenTypeComma{})
			} else {
				break
			}
		}
		t, tokens = consumeToken(tokens, TokenTypeRParen{})
	} else {
		typ, tokens = parseType(tokens)
		types = append(types, typ)
	}
	return types, tokens
}
func parseDeclaration(tokens []Token) (Declaration, []Token) {
	{
		matchExpr := tokens[0].Type
		_ = matchExpr
		if binding, ok := matchExpr.(TokenTypeImport); ok {
			_ = binding
			{
				imp, tokens := parseImport(tokens)
				_ = imp
				_ = tokens

				return DeclarationImport{imp}, tokens
			}
		} else if binding, ok := matchExpr.(TokenTypeEnumDecl); ok {
			_ = binding
			{
				e, tokens := parseEnum(tokens)
				_ = e
				_ = tokens

				return DeclarationEnum{e}, tokens
			}
		} else if binding, ok := matchExpr.(TokenTypeStruct); ok {
			_ = binding
			{
				s, tokens := parseStruct(tokens)
				_ = s
				_ = tokens

				return DeclarationStruct{s}, tokens
			}
		} else if binding, ok := matchExpr.(TokenTypeFuncDecl); ok {
			_ = binding
			{
				f, tokens := parseFunction(tokens)
				_ = f
				_ = tokens

				return DeclarationFunction{f}, tokens
			}
		}
	}

	panic(fmt.Sprintf("unexpected token: %#v", tokens[0]))
}
func parseProgram(tokens []Token) Program {
	p := Program{}
	_ = p

	for {
		tokens = skipNewlines(tokens)
		if len(tokens) == 0 {
			break
		}
		declaration, tokens2 := parseDeclaration(tokens)
		_ = declaration
		_ = tokens2

		tokens = tokens2
		p.Declarations = append(p.Declarations, declaration)
	}
	return p
}
func skipNewlines(tokens []Token) []Token {
	for {
		if len(tokens) == 0 {
			return tokens
		}
		{
			matchExpr := tokens[0].Type
			_ = matchExpr
			if binding, ok := matchExpr.(TokenTypeNewline); ok {
				_ = binding
				{
					tokens = slice(tokens, 1)
					continue
				}
			}
		}

		break
	}
	return tokens
}
func peekTokens(tokens []Token, expectedTypes []TokenType) bool {
	i := 0
	_ = i

	for {
		if i >= len(expectedTypes) {
			return true
		}
		if len(tokens) == 0 {
			return false
		}
		if tokens[i].Type != expectedTypes[i] {
			return false
		}
		i = i + 1
	}
}
func peekToken(tokens []Token, expectedType TokenType) bool {
	if len(tokens) == 0 {
		panic("Unexpected end of input")
	}
	nl := TokenTypeNewline{}
	_ = nl

	if expectedType != nl {
		tokens = skipNewlines(tokens)
	}
	return tokens[0].Type == expectedType
}
func consumeToken(tokens []Token, expectedType TokenType) (Token, []Token) {
	if len(tokens) == 0 {
		panic("Unexpected end of input")
	}
	nl := TokenTypeNewline{}
	_ = nl

	if expectedType != nl {
		tokens = skipNewlines(tokens)
	}
	if tokens[0].Type != expectedType {
		panic(fmt.Sprintf("Was expecting token %#v, got %#v.\nremaining tokens: %#v", expectedType, tokens[0], tokens))
	}
	return tokens[0], slice(tokens, 1)
}
func main() {
	dat, err := os.ReadFile("lexer.goy")
	_ = dat
	_ = err

	if err != nil {
		panic(err)
	}
	tokens := lex(dat)
	_ = tokens

	program := parseProgram(tokens)
	_ = program

	print("Program:")
	print(program)
}
+ go run build/main.go
panic: Was expecting token main.TokenTypeRParen{}, got main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}.
remaining tokens: []main.Token{main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Newline"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"\\n\""}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeBreak{}, Value:"break"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"+"}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"1"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"isAlpha"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"dat"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"ident"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"byte"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeWhile{}, Value:"while"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"isAlphanumeric"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"dat"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"ident"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"ident"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"dat"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"+"}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"1"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"ident"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"=="}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"enum\""}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"EnumDecl"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"ident"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"ident"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"=="}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"import\""}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Import"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"ident"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"ident"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"=="}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"struct\""}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Struct"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"ident"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"ident"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"=="}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"func\""}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"FuncDecl"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"ident"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"ident"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"=="}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"while\""}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"While"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"ident"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"ident"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"=="}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"if\""}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"If"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"ident"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"ident"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"=="}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"return\""}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Return"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"ident"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"ident"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"=="}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"else\""}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Else"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"ident"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"ident"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"=="}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"break\""}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Break"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"ident"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"ident"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"=="}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"continue\""}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Continue"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"ident"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Ident"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"ident"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeBreak{}, Value:"break"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeContinue{}, Value:"continue"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"isDigit"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"dat"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"n"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"byte"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeWhile{}, Value:"while"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"isDigit"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"dat"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"n"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"n"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"dat"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"+"}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"1"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"IntLiteral"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"n"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeBreak{}, Value:"break"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"nc"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"dat"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"{\""}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"LCurly"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"{\""}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"+"}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"1"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"nc"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"dat"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"}\""}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"RCurly"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"}\""}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"+"}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"1"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"nc"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"dat"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"[\""}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"LBracket"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"[\""}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"+"}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"1"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"nc"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"dat"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"]\""}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"RBracket"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"]\""}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"+"}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"1"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"nc"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"dat"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"(\""}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"LParen"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"(\""}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"+"}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"1"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"nc"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"dat"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\")\""}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"RParen"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\")\""}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"+"}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"1"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"nc"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"dat"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"\\n\""}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Newline"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"\\n\""}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"+"}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"1"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"nc"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"dat"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"\\r\\n\""}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Newline"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"\\r\\n\""}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"+"}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"2"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"nc"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"dat"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\",\""}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Comma"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\",\""}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"+"}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"1"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"nc"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"dat"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\":\""}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Colon"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\":\""}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"+"}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"1"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"nc"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"dat"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\".\""}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Dot"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\".\""}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"+"}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"1"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"nc"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"dat"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"\\\"\""}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"str"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"bs"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"\\\"\""}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"+"}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"1"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeWhile{}, Value:"while"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"nc"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"dat"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"\\\"\""}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"str"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"str"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"dat"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"+"}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"1"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeBreak{}, Value:"break"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"nc"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"dat"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"\\\\\\\"\""}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"str"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"str"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"dat"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"dat"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"+"}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"1"}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"+"}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"2"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"str"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"str"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"dat"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"+"}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"1"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"StringLiteral"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"str"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"str"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekBinaryOp"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"dat"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"len"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"str"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:">"}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"0"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"BinaryOp"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"str"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"+"}, main.Token{Type:main.TokenTypeIdent{}, Value:"len"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"str"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"nc"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"dat"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"=\""}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Equals"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"=\""}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"+"}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"1"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"panic"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"sprintf"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"unexpected token: |%c|\\n\\ntokens so far: %#v\""}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"dat"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeEnumDecl{}, Value:"enum"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Declaration"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Enum"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"Enum"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Import"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"Import"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Struct"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"Struct"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Function"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"Function"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeStruct{}, Value:"struct"}, main.Token{Type:main.TokenTypeIdent{}, Value:"FunctionParam"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Name"}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Type"}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeStruct{}, Value:"struct"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Function"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Name"}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Params"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"FunctionParam"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Returns"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Body"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Block"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeEnumDecl{}, Value:"enum"}, main.Token{Type:main.TokenTypeIdent{}, Value:"LValue"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Variable"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeStruct{}, Value:"struct"}, main.Token{Type:main.TokenTypeIdent{}, Value:"FuncCall"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"LHS"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Expr"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Params"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Expr"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeEnumDecl{}, Value:"enum"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Expr"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"VarRef"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"FuncCall"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"FuncCall"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"IntLiteral"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"int"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"BinOp"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"BinOp"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Block"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"Block"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"ArrayAccess"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"ArrayAccess"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Initializer"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"Initializer"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"StringLiteral"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeStruct{}, Value:"struct"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Initializer"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Type"}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Params"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Expr"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeStruct{}, Value:"struct"}, main.Token{Type:main.TokenTypeIdent{}, Value:"ArrayAccess"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"LHS"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Expr"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Index"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Expr"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeStruct{}, Value:"struct"}, main.Token{Type:main.TokenTypeIdent{}, Value:"BinOp"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"LHS"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Expr"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"RHS"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Expr"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Op"}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeStruct{}, Value:"struct"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Assignment"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"LValue"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"LValue"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"RValue"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Expr"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"IsReassignment"}, main.Token{Type:main.TokenTypeIdent{}, Value:"bool"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeStruct{}, Value:"struct"}, main.Token{Type:main.TokenTypeIdent{}, Value:"If"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Cond"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Expr"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"IfBody"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Expr"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"ElseBody"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Expr"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeFuncDecl{}, Value:"func"}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseReturn"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"Return"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Return"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"r"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"Return"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"r"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Expr"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseExpr"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"r"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeFuncDecl{}, Value:"func"}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseStatement"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"Statement"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Continue"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Continue"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Statement"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Continue"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Break"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Break"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Statement"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Break"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"While"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"w"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseWhile"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Statement"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"While"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"w"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"If"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseIf"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Statement"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"If"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Return"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"r"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseReturn"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Statement"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Return"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"r"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"isAssignment"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"false"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"ass"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"Assignment"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"isAssignment"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"ass"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"tryParseAssignment"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"isAssignment"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Statement"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Assignment"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"ass"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"panic"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"fmt"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Sprintf"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"trying to parse a statement, unhandled token: %#v\""}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"0"}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeFuncDecl{}, Value:"func"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tryParseAssignment"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"bool"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"Assignment"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"origTokens"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"lValues"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"LValue"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"ass"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"Assignment"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"ass"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"IsReassignment"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"false"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeWhile{}, Value:"while"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekTokens"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Ident"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Equals"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"ass"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"IsReassignment"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"true"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Ident"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"lValues"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"lValues"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"LValue"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Variable"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Value"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Equals"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeBreak{}, Value:"break"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekTokens"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Ident"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Colon"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Equals"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"ass"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"IsReassignment"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"false"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Ident"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"lValues"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"lValues"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"LValue"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Variable"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Value"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Colon"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Equals"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeBreak{}, Value:"break"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekTokens"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Ident"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Comma"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Ident"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"lValues"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"lValues"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"LValue"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Variable"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Value"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Comma"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"false"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"Assignment"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"origTokens"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"ass"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"RValue"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseExpr"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"true"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"ass"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeFuncDecl{}, Value:"func"}, main.Token{Type:main.TokenTypeIdent{}, Value:"sentinelExprJank"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Expr"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Expr"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"VarRef"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"\""}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeFuncDecl{}, Value:"func"}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseInitializer"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"Initializer"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"Initializer"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Type"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseType"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"LCurly"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeWhile{}, Value:"while"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"RCurly"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeBreak{}, Value:"break"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"arg"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens2"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseExpr"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens2"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Params"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Params"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"arg"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Comma"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Comma"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeBreak{}, Value:"break"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"RCurly"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeFuncDecl{}, Value:"func"}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseExpr"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"Expr"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"expr"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"sentinelExprJank"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"LBracket"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"Initializer"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseInitializer"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"expr"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"Expr"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Initializer"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"StringLiteral"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"StringLiteral"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"expr"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"Expr"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"StringLiteral"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Value"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"LCurly"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"b"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"Block"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"b"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseBlock"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"expr"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"Expr"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Block"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"b"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Ident"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Ident"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"expr"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"Expr"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"VarRef"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Value"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"IntLiteral"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"IntLiteral"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"expr"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"Expr"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"IntLiteral"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"atoi"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Value"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"LParen"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"funcCall"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"FuncCall"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"funcCall"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseFuncCall"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"expr"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"expr"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"Expr"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"FuncCall"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"funcCall"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"BinaryOp"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"BinaryOp"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"binop"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"BinOp"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"binop"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"LHS"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"expr"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"binop"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Op"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Value"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"binop"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"RHS"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseExpr"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"expr"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"Expr"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"BinOp"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"binop"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"LBracket"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"LBracket"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"arrayAccess"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"ArrayAccess"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"arrayAccess"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"LHS"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"expr"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"arrayAccess"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Index"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseExpr"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"RBracket"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"expr"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"Expr"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"ArrayAccess"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"arrayAccess"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"expr"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeFuncDecl{}, Value:"func"}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseFuncCall"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"lhs"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Expr"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"FuncCall"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"LParen"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"funcCall"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"FuncCall"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"funcCall"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"LHS"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"lhs"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeWhile{}, Value:"while"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"RParen"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeBreak{}, Value:"break"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"nextParam"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens2"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseExpr"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"funcCall"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Params"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"funcCall"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Params"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"nextParam"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens2"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Comma"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Comma"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeBreak{}, Value:"break"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"RParen"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"funcCall"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeEnumDecl{}, Value:"enum"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Statement"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Assignment"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"Assignment"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"While"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"While"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"If"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"If"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Return"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"Return"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Break"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Continue"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeStruct{}, Value:"struct"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Return"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Expr"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Expr"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeStruct{}, Value:"struct"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Block"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Statements"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Statement"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeStruct{}, Value:"struct"}, main.Token{Type:main.TokenTypeIdent{}, Value:"While"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Body"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Block"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeFuncDecl{}, Value:"func"}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseIf"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"If"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"If"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"If"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"LParen"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Cond"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseExpr"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"RParen"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"IfBody"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseExpr"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Else"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Else"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"ElseBody"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseExpr"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeFuncDecl{}, Value:"func"}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseWhile"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"While"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"While"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"w"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"While"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"w"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Body"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseBlock"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"w"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeFuncDecl{}, Value:"func"}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseBlock"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"Block"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"stmts"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Statement"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"LCurly"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeWhile{}, Value:"while"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"skipNewlines"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"stmt"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens2"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseStatement"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens2"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"stmts"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"stmts"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"stmt"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"RCurly"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeBreak{}, Value:"break"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"RCurly"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Block"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"stmts"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeStruct{}, Value:"struct"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Program"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Declarations"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Declaration"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeStruct{}, Value:"struct"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Import"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Name"}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeStruct{}, Value:"struct"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Enum"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Name"}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Variants"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"EnumVariant"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeStruct{}, Value:"struct"}, main.Token{Type:main.TokenTypeIdent{}, Value:"EnumVariant"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Name"}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Type"}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeStruct{}, Value:"struct"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Struct"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Name"}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Fields"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"StructField"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeStruct{}, Value:"struct"}, main.Token{Type:main.TokenTypeIdent{}, Value:"StructField"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Name"}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Type"}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeFuncDecl{}, Value:"func"}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseImport"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"Import"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Import"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"StringLiteral"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"name"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Value"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Import"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"name"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeFuncDecl{}, Value:"func"}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseEnum"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"Enum"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"EnumDecl"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Ident"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"e"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"Enum"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"e"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Name"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Value"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"LCurly"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeWhile{}, Value:"while"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"RCurly"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"RCurly"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeBreak{}, Value:"break"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Ident"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"variant"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"EnumVariant"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"variant"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Name"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Value"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"LParen"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"LParen"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"typ"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"\""}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"typ"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseType"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"variant"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Type"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"typ"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"RParen"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"e"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Variants"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"e"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Variants"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"variant"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Comma"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"e"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeFuncDecl{}, Value:"func"}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseStruct"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"Struct"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Struct"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Ident"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"s"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"Struct"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"s"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Name"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Value"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"LCurly"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeWhile{}, Value:"while"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"RCurly"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"RCurly"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeBreak{}, Value:"break"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"field"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"StructField"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Ident"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"field"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Name"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Value"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"field"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Type"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseType"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"s"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Fields"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"s"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Fields"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"field"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Comma"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"s"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeFuncDecl{}, Value:"func"}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseType"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"name"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"\""}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeWhile{}, Value:"while"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Ident"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Ident"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"name"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"name"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"+"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Value"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"LBracket"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"LBracket"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"name"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"name"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"+"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Value"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"RBracket"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"RBracket"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"name"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"name"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"+"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Value"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeBreak{}, Value:"break"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"name"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeFuncDecl{}, Value:"func"}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseFunction"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"Function"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"FuncDecl"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Ident"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"f"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"Function"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"f"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Name"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Value"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"LParen"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeWhile{}, Value:"while"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"RParen"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"RParen"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeBreak{}, Value:"break"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"param"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"FunctionParam"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Ident"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"param"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Name"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Value"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"param"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Type"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseType"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"f"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Params"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"f"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Params"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"param"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Comma"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Comma"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"not"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"LCurly"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"typ"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"\""}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"f"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Returns"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseReturnTypes"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"f"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Body"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseBlock"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"f"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeFuncDecl{}, Value:"func"}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseReturnTypes"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"types"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"string"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"typ"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"\""}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"LParen"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"LParen"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeWhile{}, Value:"while"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"typ"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseType"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"types"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"types"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"typ"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Comma"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Comma"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeBreak{}, Value:"break"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"t"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"RParen"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeElse{}, Value:"else"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"typ"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseType"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"types"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"types"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"typ"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"types"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeFuncDecl{}, Value:"func"}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseDeclaration"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"Declaration"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"match"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"0"}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Type"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Import"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"imp"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseImport"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Declaration"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Import"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"imp"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"EnumDecl"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"e"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseEnum"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Declaration"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Enum"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"e"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Struct"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"s"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseStruct"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Declaration"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Struct"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"s"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"FuncDecl"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"f"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseFunction"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Declaration"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Function"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeIdent{}, Value:"f"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"panic"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"fmt"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Sprintf"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"unexpected token: %#v\""}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"0"}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeFuncDecl{}, Value:"func"}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseProgram"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Program"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"p"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"Program"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeWhile{}, Value:"while"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"skipNewlines"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"len"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"=="}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"0"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeBreak{}, Value:"break"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"declaration"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens2"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseDeclaration"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens2"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"p"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Declarations"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"append"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"p"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Declarations"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"declaration"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"p"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeFuncDecl{}, Value:"func"}, main.Token{Type:main.TokenTypeIdent{}, Value:"skipNewlines"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeWhile{}, Value:"while"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"len"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"=="}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"0"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"match"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"0"}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Type"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Newline"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"slice"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"1"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeContinue{}, Value:"continue"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeBreak{}, Value:"break"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeFuncDecl{}, Value:"func"}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekTokens"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"expectedTypes"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeIdent{}, Value:"bool"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"0"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeWhile{}, Value:"while"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:">="}, main.Token{Type:main.TokenTypeIdent{}, Value:"len"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"expectedTypes"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"true"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"len"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"=="}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"0"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"false"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Type"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"!="}, main.Token{Type:main.TokenTypeIdent{}, Value:"expectedTypes"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"false"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"i"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"+"}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"1"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeFuncDecl{}, Value:"func"}, main.Token{Type:main.TokenTypeIdent{}, Value:"peekToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"expectedType"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeIdent{}, Value:"bool"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"len"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"=="}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"0"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"panic"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"Unexpected end of input\""}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"nl"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Newline"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"expectedType"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"!="}, main.Token{Type:main.TokenTypeIdent{}, Value:"nl"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"skipNewlines"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"0"}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Type"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"=="}, main.Token{Type:main.TokenTypeIdent{}, Value:"expectedType"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeFuncDecl{}, Value:"func"}, main.Token{Type:main.TokenTypeIdent{}, Value:"consumeToken"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"expectedType"}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeIdent{}, Value:"Token"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"len"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"=="}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"0"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"panic"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"Unexpected end of input\""}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"nl"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"TokenType"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Newline"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"expectedType"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"!="}, main.Token{Type:main.TokenTypeIdent{}, Value:"nl"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"skipNewlines"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"0"}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Type"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"!="}, main.Token{Type:main.TokenTypeIdent{}, Value:"expectedType"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"panic"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"fmt"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"Sprintf"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"Was expecting token %#v, got %#v.\\nremaining tokens: %#v\""}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"expectedType"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"0"}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeReturn{}, Value:"return"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeLBracket{}, Value:"["}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"0"}, main.Token{Type:main.TokenTypeRBracket{}, Value:"]"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"slice"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIntLiteral{}, Value:"1"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeFuncDecl{}, Value:"func"}, main.Token{Type:main.TokenTypeIdent{}, Value:"main"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"dat"}, main.Token{Type:main.TokenTypeComma{}, Value:","}, main.Token{Type:main.TokenTypeIdent{}, Value:"err"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"os"}, main.Token{Type:main.TokenTypeDot{}, Value:"."}, main.Token{Type:main.TokenTypeIdent{}, Value:"ReadFile"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"lexer.goy\""}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIf{}, Value:"if"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"err"}, main.Token{Type:main.TokenTypeBinaryOp{}, Value:"!="}, main.Token{Type:main.TokenTypeIdent{}, Value:"nil"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeLCurly{}, Value:"{"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"panic"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"err"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"lex"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"dat"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"program"}, main.Token{Type:main.TokenTypeColon{}, Value:":"}, main.Token{Type:main.TokenTypeEquals{}, Value:"="}, main.Token{Type:main.TokenTypeIdent{}, Value:"parseProgram"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"tokens"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"print"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeStringLiteral{}, Value:"\"Program:\""}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeIdent{}, Value:"print"}, main.Token{Type:main.TokenTypeLParen{}, Value:"("}, main.Token{Type:main.TokenTypeIdent{}, Value:"program"}, main.Token{Type:main.TokenTypeRParen{}, Value:")"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}, main.Token{Type:main.TokenTypeRCurly{}, Value:"}"}, main.Token{Type:main.TokenTypeNewline{}, Value:"\n"}}

goroutine 1 [running]:
main.consumeToken({0xc000145520?, 0x14ba?, 0x1758?}, {0x4d5c88?, 0x581410})
	/home/sumeet/goylang/build/main.go:1304 +0x22e
main.parseFuncCall({0xc0001454a0?, 0x6?, 0x0?}, {0x4d5908, 0xc0000149d0})
	/home/sumeet/goylang/build/main.go:863 +0x230
main.parseExpr({0xc000145480, 0x14be, 0x175c})
	/home/sumeet/goylang/build/main.go:813 +0x4f1
main.tryParseAssignment({0xc000145440?, 0x14c0, 0x175e})
	/home/sumeet/goylang/build/main.go:746 +0x608
main.parseStatement({0xc000145440, 0x14c0, 0x175e})
	/home/sumeet/goylang/build/main.go:704 +0x166
main.parseBlock({0xc000145400?, 0x2?, 0x0?})
	/home/sumeet/goylang/build/main.go:978 +0x92
main.parseExpr({0xc000145400, 0x14c2, 0x1760})
	/home/sumeet/goylang/build/main.go:800 +0x2b1
main.parseIf({0xc0001452a0?, 0x494991?, 0xc000144ee0?})
	/home/sumeet/goylang/build/main.go:950 +0xc9
main.parseStatement({0xc0001452a0, 0x14cd, 0x176b})
	/home/sumeet/goylang/build/main.go:686 +0x318
main.parseBlock({0xc000145260?, 0xc000145240?, 0x5824e0?})
	/home/sumeet/goylang/build/main.go:978 +0x92
main.parseWhile({0xc000145240?, 0x0?, 0x1780?})
	/home/sumeet/goylang/build/main.go:965 +0x3a
main.parseStatement({0xc000145240, 0x14d0, 0x176e})
	/home/sumeet/goylang/build/main.go:680 +0x42c
main.parseBlock({0xc000145200?, 0x2?, 0x2?})
	/home/sumeet/goylang/build/main.go:978 +0x92
main.parseExpr({0xc000145200, 0x14d2, 0x1770})
	/home/sumeet/goylang/build/main.go:800 +0x2b1
main.parseIf({0xc0001450a0?, 0xc0000fbf30?, 0x7?})
	/home/sumeet/goylang/build/main.go:950 +0xc9
main.parseStatement({0xc0001450a0, 0x14dd, 0x177b})
	/home/sumeet/goylang/build/main.go:686 +0x318
main.parseBlock({0xc000144a80?, 0xc000144a60?, 0xc0000699a0?})
	/home/sumeet/goylang/build/main.go:978 +0x92
main.parseWhile({0xc000144a60?, 0x1510?, 0x17ae?})
	/home/sumeet/goylang/build/main.go:965 +0x3a
main.parseStatement({0xc000144a60, 0x150f, 0x17ad})
	/home/sumeet/goylang/build/main.go:680 +0x42c
main.parseBlock({0xc000144860?, 0x1522?, 0x17c0?})
	/home/sumeet/goylang/build/main.go:978 +0x92
main.parseFunction({0xc000144700?, 0xc00008cc58?, 0x40b810?})
	/home/sumeet/goylang/build/main.go:1149 +0x334
main.parseDeclaration({0xc000144700?, 0x2?, 0x4b5a59?})
	/home/sumeet/goylang/build/main.go:1214 +0x31e
main.parseProgram({0xc000142000?, 0x4e9c?, 0x0?})
	/home/sumeet/goylang/build/main.go:1234 +0x6e
main.main()
	/home/sumeet/goylang/build/main.go:1319 +0x3c
exit status 2
